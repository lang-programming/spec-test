lang.name = Lang Tests (Texts)
lang.version = v1.0.0

lang.test = 1

# Preparation
$void = func.randChoice()

$var = test1
$varabc = test2

# Tests
fn.testUnit(Texts)
{
    fn.testSubUnit(Escape sequences [Without forced node split])
    
    fn.testAssertStrictEquals(\0, func.toChar(0))
    fn.testAssertStrictEquals(\n, func.toChar(10))
    fn.testAssertStrictEquals(\r, func.toChar(13))
    fn.testAssertStrictEquals(\f, func.toChar(12))
    fn.testAssertStrictEquals(\s, func.toChar(32))
    fn.testAssertStrictEquals(\e, )
    fn.testAssertStrictEquals(\b, func.toChar(8))
    fn.testAssertStrictEquals(\t, func.toChar(9))
    fn.testAssertStrictEquals(\$, func.toChar(36))
    fn.testAssertStrictEquals(\&, func.toChar(38))
    fn.testAssertStrictEquals(\#, func.toChar(35))
    fn.testAssertStrictEquals(\,, func.toChar(44))
    fn.testAssertStrictEquals(\(, func.toChar(40))
    fn.testAssertStrictEquals(\), func.toChar(41))
    fn.testAssertStrictEquals(\{, func.toChar(123))
    fn.testAssertStrictEquals(\}, func.toChar(125))
    fn.testAssertStrictEquals(\=, func.toChar(61))
    fn.testAssertStrictEquals(\<, func.toChar(60))
    fn.testAssertStrictEquals(\>, func.toChar(62))
    fn.testAssertStrictEquals(\\, func.toChar(92))
}
{
    fn.testSubUnit(Escape sequences [Other characters])
    lang.errorOutput = -1 # Temporary disable warnings
    
    fn.testAssertStrictEquals(\", func.toChar(34))
    fn.testAssertStrictEquals(\%, func.toChar(37))
    fn.testAssertStrictEquals(\', func.toChar(39))
    fn.testAssertStrictEquals(\*, func.toChar(42))
    fn.testAssertStrictEquals(\+, func.toChar(43))
    fn.testAssertStrictEquals(\-, func.toChar(45))
    fn.testAssertStrictEquals(\., func.toChar(46))
    fn.testAssertStrictEquals(\/, func.toChar(47))
    fn.testAssertStrictEquals(\1, func.toChar(49))
    fn.testAssertStrictEquals(\2, func.toChar(50))
    fn.testAssertStrictEquals(\5, func.toChar(53))
    fn.testAssertStrictEquals(\8, func.toChar(56))
    fn.testAssertStrictEquals(\9, func.toChar(57))
    fn.testAssertStrictEquals(\:, func.toChar(58))
    fn.testAssertStrictEquals(\;, func.toChar(59))
    fn.testAssertStrictEquals(\?, func.toChar(63))
    fn.testAssertStrictEquals(\@, func.toChar(64))
    fn.testAssertStrictEquals(\A, func.toChar(65))
    fn.testAssertStrictEquals(\B, func.toChar(66))
    fn.testAssertStrictEquals(\M, func.toChar(77))
    fn.testAssertStrictEquals(\N, func.toChar(78))
    fn.testAssertStrictEquals(\Y, func.toChar(89))
    fn.testAssertStrictEquals(\Z, func.toChar(90))
    fn.testAssertStrictEquals(\`, func.toChar(96))
    fn.testAssertStrictEquals(\a, func.toChar(97))
    fn.testAssertStrictEquals(\c, func.toChar(99))
    fn.testAssertStrictEquals(\m, func.toChar(109))
    fn.testAssertStrictEquals(\o, func.toChar(111))
    fn.testAssertStrictEquals(\y, func.toChar(121))
    fn.testAssertStrictEquals(\z, func.toChar(122))
    fn.testAssertStrictEquals(\|, func.toChar(124))
    fn.testAssertStrictEquals(\~, func.toChar(126))
    
    lang.errorOutput = 1 # Re-enable warnings
}
{
    fn.testSubUnit(Escape sequences [Forced node split])
    
    fn.testAssertStrictEquals(\!, $void)
    fn.testAssertStrictEquals(4\!2, {{{42}}})
    fn.testAssertStrictEquals(4\!.2, {{{40.2}}})
    fn.testAssertStrictEquals(4\!.\!2, {{{4.2}}})
    fn.testAssertStrictEquals($var, test1)
    fn.testAssertStrictEquals($var\!abc, test1abc)
    fn.testAssertStrictEquals($varabc, test2)
    fn.testAssertStrictEquals(func.addi(1, 2), 3)
    fn.testAssertStrictEquals(func\!.addi(1, 2), {{{func.addi(1, 2)}}})
    fn.testAssertStrictEquals($\!var, {{{$var}}})
    fn.testAssertStrictNotEquals(4\!.2, 4.2)
    fn.testAssertStrictNotEquals(4\!2, 42)
    fn.testAssertStrictNotEquals(4\!.\!2, 4.2)
    
    fn.testAssertStrictEquals(nu\!ll, {{{null}}})
    fn.testAssertStrictEquals(n\!ull, {{{null}}})
    fn.testAssertStrictEquals(nul\!l, {{{null}}})
    fn.testAssertNotNull(nu\!ll)
    fn.testAssertNotNull(n\!ull)
    fn.testAssertNotNull(nul\!l)
    fn.testAssertNull(\!null)
    fn.testAssertNull(null\!)
}
{
    fn.testSubUnit(Unicode escape sequences)

    fn.testAssertStrictEquals(\u{0}, \0)
    fn.testAssertStrictEquals(\u{a}, \n)
    fn.testAssertStrictEquals(\u{A}, \n)
    fn.testAssertStrictEquals(\u{4a}, J)
    fn.testAssertStrictEquals(\u{4A}, J)
    fn.testAssertStrictEquals(\u{e4}, Ã¤)
    fn.testAssertStrictEquals(\u{E4}, Ã¤)
    fn.testAssertStrictEquals(\u{3b3}, Î³)
    fn.testAssertStrictEquals(\u{3B3}, Î³)
    fn.testAssertStrictEquals(\u{20ac}, â‚¬)
    fn.testAssertStrictEquals(\u{20AC}, â‚¬)
    fn.testAssertStrictEquals(\u{1f643}, ðŸ™ƒ)
    fn.testAssertStrictEquals(\u{1F643}, ðŸ™ƒ)
    fn.testAssertStrictEquals(\u{10AAAA}, ôŠªª)
    fn.testAssertStrictEquals(\u{10AAAA}, ôŠªª)
    fn.testAssertStrictEquals(\u{21f643}, ï¿½)
    fn.testAssertStrictEquals(\u{21F643}, ï¿½)
}
{
    fn.testSubUnit(UTF-32 character support)

    fn.testAssertStrictEquals(fn.toChar(372847387823), ï¿½)
    fn.testAssertStrictEquals(fn.toChar(128579), ðŸ™ƒ, "parser must treat input string with a single UTF-8 code point which \
is to small to fit into 2 bytes as an UTF-32 char value")
    fn.testAssertStrictEquals(fn.toChar(128579), fn.ttoc(ðŸ™ƒ), "String with a single UTF-8 code point which \
is to small to fit into 2 bytes as an UTF-32 char value")
    parser.op(fn.testAssertStrictEquals(@"ðŸ™ƒ", 1))
    parser.op(fn.testAssertStrictEquals(@"ôŠªª", 1))
    parser.op(fn.testAssertStrictEquals(@"\u{20AC}", 1))
    parser.op(fn.testAssertStrictEquals(@"\u{21f643}", 1))
    parser.op(fn.testAssertStrictEquals(@"ðŸ™ƒ - test", 8))
    parser.op(fn.testAssertStrictEquals(@"test - ðŸ™ƒ", 8))
    parser.op(fn.testAssertStrictEquals(@"test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", 24))
    parser.op(fn.testAssertStrictEquals(charsOf("ðŸ™ƒ"), [ðŸ™ƒ]))
    parser.op(fn.testAssertStrictEquals(charsOf("ðŸ™ƒ - test"), [ðŸ™ƒ, \s, \-, \s, t, e, s, t]))
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ"), 7)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 0), 7)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 6), 7)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 7), 7)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 8), 17)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 9), 17)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 10), 17)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 15), 17)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 16), 17)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 17), 17)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 18), -1)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 19), -1)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 23), -1)
    fn.testAssertStrictEquals(fn.indexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", -1), -1)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ"), 17)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 0), -1)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 6), -1)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 7), 7)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 8), 7)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 9), 7)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 10), 7)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 15), 7)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 16), 7)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 17), 17)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 18), 17)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 19), 17)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", 23), 17)
    fn.testAssertStrictEquals(fn.lastIndexOf("test - ðŸ™ƒ - abc - ðŸ™ƒ - 123", "ðŸ™ƒ", -1), 17)
    parser.op(fn.testAssertStrictEquals(join(" - ðŸ™ƒ - ", [1, "ðŸ™ƒ", "x"]), "1 - ðŸ™ƒ - ðŸ™ƒ - ðŸ™ƒ - x"))
    parser.op(fn.testAssertStrictEquals(-|ðŸ™ƒ, ðŸ™‚))
    parser.op(fn.testAssertStrictEquals(+|ðŸ™ƒ, ðŸ™„))
    fn.testAssertStrictEquals($LANG_TYPE_INT(ðŸ™ƒ), 128579)
}
