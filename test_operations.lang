lang.name = Lang Tests (Operations)
lang.version = v1.0.0

lang.test = 1

# Preparation
$n1 = -1
$n2 = -2
$n3 = -3
$n4 = -4

# Tests
func.langTestUnit(Operations)
{
	func.langTestSubUnit(Associtivity [POW operator])
	
	func.langTestAssertStrictEquals(parser.op(4**3**2), 262144)
	func.langTestAssertStrictEquals(parser.op(4**(3**2)), 262144)
	func.langTestAssertStrictEquals(parser.op((4**3)**2), 4096)
}
{
	func.langTestSubUnit(Complex operator expressions [Without grouping])
	
	func.langTestAssertStrictEquals(parser.op(1==2==3), 0)
	func.langTestAssertStrictEquals(parser.op(2==3==0), 1)
	func.langTestAssertStrictEquals(parser.op(1||1||1&&1), 1)
	func.langTestAssertStrictEquals(parser.op(1||0||1&&0), 1)
	func.langTestAssertStrictEquals(parser.op(0||0||1&&0), 0)
	func.langTestAssertStrictEquals(parser.op(▲▼2**▲~3), func.double(.125))
	func.langTestAssertStrictEquals(parser.op(▲▲2**▲~3), func.double(2.125))
	func.langTestAssertStrictEquals(parser.op(▼▼2**▲~3), func.double(-1.875))
	func.langTestAssertStrictEquals(parser.op(2<<5>>3<<6>>>4), 32)
	func.langTestAssertStrictEquals(parser.op(61%8//3/5*6+8), 9.2f)
	func.langTestAssertStrictEquals(parser.op(+--2---+3), -1)
	func.langTestAssertStrictEquals(parser.op(+--3---+2), 1)
	func.langTestAssertStrictEquals(parser.op(-4//-3), 1)
	func.langTestAssertStrictEquals(parser.op(-3.//-2), 1.)
	func.langTestAssertStrictEquals(parser.op(-3.//-$n2), -2.)
	func.langTestAssertStrictEquals(parser.op(-$n3//-2), -2)
	func.langTestAssertStrictEquals(parser.op(-$n3//-$n2), 1)
	func.langTestAssertStrictEquals(parser.op(2*3+4), 10)
	func.langTestAssertStrictEquals(parser.op(2*-3), -6)
	func.langTestAssertStrictEquals(parser.op(-2**-3), func.double(-.125))
	func.langTestAssertStrictEquals(parser.op(1<=>1), 0)
	func.langTestAssertStrictEquals(parser.op(1<=>2), -1)
	func.langTestAssertStrictEquals(parser.op(2<=>1), 1)
	func.langTestAssertStrictEquals(parser.op(2**2**2**2*5), 327680)
	func.langTestAssertStrictEquals(parser.op(+-~0), 1)
	func.langTestAssertStrictEquals(parser.op(+2**-+~3), 16)
	func.langTestAssertStrictEquals(parser.op(-2**--3**~-3), -512)
	func.langTestAssertStrictEquals(parser.op(null??null?42:abc), abc)
	func.langTestAssertStrictEquals(parser.op(0??null?42:abc), abc)
	func.langTestAssertStrictEquals(parser.op(0??1?42:abc), abc)
	func.langTestAssertStrictEquals(parser.op(null??1?42:abc), 42)
	func.langTestAssertStrictEquals(parser.op(0?0??abc:text), text)
	func.langTestAssertStrictEquals(parser.op(1?0??abc:text), 0)
	func.langTestAssertStrictEquals(parser.op(1?2??abc:text), 2)
	func.langTestAssertStrictEquals(parser.op(1?null??abc:text), abc)
	func.langTestAssertStrictEquals(parser.op(1?null??null:text), null)
	func.langTestAssertStrictEquals(parser.op(0?0?:abc:text), text)
	func.langTestAssertStrictEquals(parser.op(1?0?:abc:text), abc)
	func.langTestAssertStrictEquals(parser.op(1?2?:abc:text), 2)
	func.langTestAssertStrictEquals(parser.op(1?null?:abc:text), abc)
	func.langTestAssertStrictEquals(parser.op(1?null?:null:text), null)
	func.langTestAssertStrictEquals(parser.op(0?42:0??2), 0)
	func.langTestAssertStrictEquals(parser.op(0?42:0?:2), 2)
	func.langTestAssertStrictEquals(parser.op(0?42:1??2), 1)
	func.langTestAssertStrictEquals(parser.op(0?42:1?:2), 1)
	func.langTestAssertStrictEquals(parser.op(0?42:null??2), 2)
	func.langTestAssertStrictEquals(parser.op(0?42:null?:2), 2)
	func.langTestAssertStrictEquals(parser.op(1?42:null??2), 42)
	func.langTestAssertStrictEquals(parser.op(1?42:null?:2), 42)
	func.langTestAssertStrictEquals(parser.op(-@text**2), -16)
	func.langTestAssertStrictEquals(parser.op(-^3**2), -9)
	func.langTestAssertStrictEquals(parser.op(^-3**2), -9)
	func.langTestAssertStrictEquals(parser.op(!3**2), 0)
	func.langTestAssertStrictEquals(parser.op(!!3**2), 1)
	func.langTestAssertStrictEquals(parser.op(!-!3**2), 1)
	func.langTestAssertStrictEquals(parser.op(-!-!3**2), -1)
	func.langTestAssertStrictEquals(parser.op(-!!-3**2), -1)
	func.langTestAssertStrictEquals(parser.op(!-0&&0), 0)
	func.langTestAssertStrictEquals(parser.op(!-1&&0), 0)
	func.langTestAssertStrictEquals(parser.op(!-0&&1), 1)
	func.langTestAssertStrictEquals(parser.op(!-1&&1), 0)
	func.langTestAssertStrictEquals(parser.op(1+2<=>90>>>2>=0), 0)
	func.langTestAssertStrictEquals(parser.op(1-9<=>90>>>2>=0), 0)
	func.langTestAssertStrictEquals(parser.op(1+21<=>90>>>2>=0), 1)
	func.langTestAssertStrictEquals(parser.op(1+2<=>90>>>2<=0), 1)
	func.langTestAssertStrictEquals(parser.op(1-9<=>90>>>2<=0), 1)
	func.langTestAssertStrictEquals(parser.op(1+21<=>90>>>2<=0), 1)
}
{
	func.langTestSubUnit(Complex operator expressions [With grouping])
	
	func.langTestAssertStrictEquals(parser.op(2*3-4-(-5-6--7---8)), 14)
	func.langTestAssertStrictEquals(parser.op(2+(3^5-~6&5)), 9)
	func.langTestAssertStrictEquals(parser.op(2+(3^5-~7&5)), 8)
	func.langTestAssertStrictEquals(parser.op(2*(3+4)-6//5), 13)
	func.langTestAssertStrictEquals(parser.op(~(1|2)), -4)
	func.langTestAssertStrictEquals(parser.op((~(1|2))**3), -64)
	func.langTestAssertStrictEquals(parser.op(-1+2+(+3*-4**2)), -47)
	func.langTestAssertStrictEquals(parser.op(-(1|2)**4), -81)
	func.langTestAssertStrictEquals(parser.op((-(2==2))**2), 1)
	func.langTestAssertStrictEquals(parser.op((-(2==2))**3), -1)
	func.langTestAssertStrictEquals(parser.op(!(-0&&0)), 1)
	func.langTestAssertStrictEquals(parser.op(!(-1&&0)), 1)
	func.langTestAssertStrictEquals(parser.op(!(-0&&1)), 1)
	func.langTestAssertStrictEquals(parser.op(!(-1&&1)), 0)
	func.langTestAssertStrictEquals(parser.op(!-1&&2+(+4||-4**1)), 0)
	func.langTestAssertStrictEquals(parser.op(!-0&&2+(+4||-4**1)), 1)
	func.langTestAssertStrictEquals(parser.op(!-1&&1-(+2||-4**1)), 0)
	func.langTestAssertStrictEquals(parser.op(1*2==1+1&&(1||0)&&1+42), 1)
	func.langTestAssertStrictEquals(parser.op(1*2==1+1&&(1||0)||1+42), 1)
	func.langTestAssertStrictEquals(parser.op(2*2==1+1&&(1||0)&&1+42), 0)
	func.langTestAssertStrictEquals(parser.op(2*2==1+1&&(1||0)||1+42), 1)
	func.langTestAssertStrictEquals(parser.op(2*2==1+1&&(1||0)&&-42+42), 0)
	func.langTestAssertStrictEquals(parser.op(2*2==1+1&&(1||0)||-42+42), 0)
	func.langTestAssertStrictEquals(parser.op(1+2&&(7^5-~8==153&105)), 1)
	func.langTestAssertStrictEquals(parser.op(1-1&&(7^5-~8==153&105)), 0)
	func.langTestAssertStrictEquals(parser.op(1+2&&(7^5-~9==153&105)), 0)
	func.langTestAssertStrictEquals(parser.op(1+2&&(7^5-~8==103&105)), 0)
	func.langTestAssertStrictEquals(parser.op(1+2||3??4?:5+(6??7+8)), 1)
	func.langTestAssertStrictEquals(parser.op(1+2&&0??4?:5+(6??7+8)), 11)
	func.langTestAssertStrictEquals(parser.op(1+2&&0??0?:5+(6??7+8)), 11)
	func.langTestAssertStrictEquals(parser.op(1+2&&0??0?:5+(0??7+8)), 5)
	func.langTestAssertStrictEquals(parser.op(1+2&&0??0?:5+(null??7+8)), 20)
	func.langTestAssertStrictEquals(parser.op(null??4?:5+(null??7+8)), 4)
	func.langTestAssertStrictEquals(parser.op(null??0?:5+(null??7+7)), 19)
	func.langTestAssertStrictEquals(parser.op(1+2||3??4?:5+(6?:7+8)), 1)
	func.langTestAssertStrictEquals(parser.op(1+2&&0??4?:5+(6?:7+8)), 11)
	func.langTestAssertStrictEquals(parser.op(1+2&&0??0?:5+(0?:7+8)), 20)
	func.langTestAssertStrictEquals(parser.op(1+2&&0??0?:5+(null?:7+8)), 20)
	func.langTestAssertStrictEquals(parser.op(null??4?:5+(null?:7+8)), 4)
	func.langTestAssertStrictEquals(parser.op(null??0?:5+(null?:7+7)), 19)
}
{
	func.langTestSubUnit(Invalid operator expressions)
	
	func.langTestAssertStrictEquals(parser.op(:), :)
	func.langTestAssertStrictEquals(parser.op(?), ?)
	func.langTestAssertStrictEquals(parser.op(1:2), {{{1:2}}})
	func.langTestAssertStrictEquals(parser.op(1?2), {{{1?2}}})
	func.langTestAssertStrictEquals(parser.op(1:2?3), {{{1:2?3}}})
	func.langTestAssertStrictEquals(parser.op(1?2\:3), {{{1?2:3}}})
	func.langTestAssertStrictEquals(parser.op(1\?2:3), {{{1?2:3}}})
	func.langTestAssertStrictEquals(parser.op(? :), {{{? :}}})
	func.langTestAssertStrictEquals(parser.op(1 2 ?3), {{{1 2 ?3}}})
	func.langTestAssertStrictEquals(parser.op(1 2 ? 3), {{{1 2 ? 3}}})
	func.langTestAssertStrictEquals(parser.op(1 ? 2), {{{1 ? 2}}})
	func.langTestAssertStrictEquals(parser.op(?1:2), {{{?1:2}}})
	func.langTestAssertStrictEquals(parser.op(1?2:), {{{1?2:}}})
}
{
	func.langTestSubUnit(Invalid operator expressions [Complex operator expressions])
	
	func.langTestAssertStrictEquals(parser.op(1:2+3), {{{1:23}}})
	func.langTestAssertStrictEquals(parser.op(1?2+3), {{{1?23}}})
	func.langTestAssertStrictEquals(parser.op(1:2?3+4), {{{1:2?34}}})
	func.langTestAssertStrictEquals(parser.op(1?~2), {{{1?~2}}})
}
