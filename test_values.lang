lang.name = Lang Tests (Values)
lang.version = v1.0.0

lang.test = 1

# Preparation
$void = func.freeAllVars()
$test = 0
$ptr = $[test]
fp.test = () -> return
fp.test2 = () -> return

lang.errorOutput = -1 # Temporary disable warnings

fp.println = func.println

lang.errorOutput = 1 # Re-enable warnings

# Tests
fn.testUnit(Values)
{
	fn.testSubUnit(NULL)
	
	fn.testAssertNull(null)
}
{
	fn.testSubUnit(NULL [Strict not equals])
	
	fn.testAssertStrictNotEquals(null, $void)
	fn.testAssertStrictNotEquals(null, text)
	fn.testAssertStrictNotEquals(null, a)
	fn.testAssertStrictNotEquals(null, -2)
	fn.testAssertStrictNotEquals(null, -2L)
	fn.testAssertStrictNotEquals(null, 2.3f)
	fn.testAssertStrictNotEquals(null, 2.3)
	fn.testAssertStrictNotEquals(null, func.arrayOf())
	fn.testAssertStrictNotEquals(null, func.println)
	fn.testAssertStrictNotEquals(null, fp.println)
	fn.testAssertStrictNotEquals(null, $[void])
}
{
	fn.testSubUnit(VOID)
	
	fn.testAssertVoid($void)
}
{
	fn.testSubUnit(VOID [Strict not equals])
	
	fn.testAssertStrictNotEquals($void, null)
	fn.testAssertStrictNotEquals($void, text)
	fn.testAssertStrictNotEquals($void, a)
	fn.testAssertStrictNotEquals($void, -2)
	fn.testAssertStrictNotEquals($void, -2L)
	fn.testAssertStrictNotEquals($void, 2.3f)
	fn.testAssertStrictNotEquals($void, 2.3)
	fn.testAssertStrictNotEquals($void, func.arrayOf())
	fn.testAssertStrictNotEquals($void, func.println)
	fn.testAssertStrictNotEquals($void, fp.println)
	fn.testAssertStrictNotEquals($void, $[void])
}
{
	fn.testSubUnit(TEXT [Strict equals])
	
	fn.testAssertStrictEquals({{{abc}}}, abc)
}
{
	fn.testSubUnit(TEXT [Strict not equals])
	
	fn.testAssertStrictNotEquals(abc, $void)
	fn.testAssertStrictNotEquals(abc, null)
	fn.testAssertStrictNotEquals(abc, a)
	fn.testAssertStrictNotEquals(abc, -2)
	fn.testAssertStrictNotEquals(abc, -2L)
	fn.testAssertStrictNotEquals(abc, 2.3f)
	fn.testAssertStrictNotEquals(abc, 2.3)
	fn.testAssertStrictNotEquals(abc, func.arrayOf())
	fn.testAssertStrictNotEquals(abc, func.println)
	fn.testAssertStrictNotEquals(abc, fp.println)
	fn.testAssertStrictNotEquals(abc, $[void])
	fn.testAssertStrictNotEquals(abc, def)
}
{
	fn.testSubUnit(CHAR [Strict equals])
	
	fn.testAssertStrictEquals(\t, fn.toChar(9))
	fn.testAssertStrictEquals(e, fn.char(e))
}
{
	fn.testSubUnit(CHAR [Strict not equals])
	
	fn.testAssertStrictNotEquals(e, $void)
	fn.testAssertStrictNotEquals(e, null)
	fn.testAssertStrictNotEquals(e, abc)
	fn.testAssertStrictNotEquals(e, -2)
	fn.testAssertStrictNotEquals(e, -2L)
	fn.testAssertStrictNotEquals(e, 2.3f)
	fn.testAssertStrictNotEquals(e, 2.3)
	fn.testAssertStrictNotEquals(e, func.arrayOf())
	fn.testAssertStrictNotEquals(e, func.println)
	fn.testAssertStrictNotEquals(e, fp.println)
	fn.testAssertStrictNotEquals(e, $[void])
	fn.testAssertStrictNotEquals(e, f)
}
{
	fn.testSubUnit(INT [Strict equals])
	
	fn.testAssertStrictEquals(-2, -2)
}
{
	fn.testSubUnit(INT [Strict not equals])
	
	fn.testAssertStrictNotEquals(-2, $void)
	fn.testAssertStrictNotEquals(-2, null)
	fn.testAssertStrictNotEquals(-2, abc)
	fn.testAssertStrictNotEquals(-2, a)
	fn.testAssertStrictNotEquals(-2, -2L)
	fn.testAssertStrictNotEquals(-2, -2.3)
	fn.testAssertStrictNotEquals(-2, -2.3f)
	fn.testAssertStrictNotEquals(-2, func.arrayOf())
	fn.testAssertStrictNotEquals(-2, func.println)
	fn.testAssertStrictNotEquals(-2, fp.println)
	fn.testAssertStrictNotEquals(-2, $[void])
	fn.testAssertStrictNotEquals(-2, 2)
	fn.testAssertStrictNotEquals(-2, -3)
}
{
	fn.testSubUnit(LONG [Strict equals])
	
	fn.testAssertStrictEquals(-2L, fn.long(-2))
	fn.testAssertStrictEquals(-9223372036854775L, -9223372036854775)
}
{
	fn.testSubUnit(LONG [Strict not equals])
	
	fn.testAssertStrictNotEquals(-2L, $void)
	fn.testAssertStrictNotEquals(-2L, null)
	fn.testAssertStrictNotEquals(-2L, abc)
	fn.testAssertStrictNotEquals(-2L, a)
	fn.testAssertStrictNotEquals(-2L, -2)
	fn.testAssertStrictNotEquals(-2L, -2.f)
	fn.testAssertStrictNotEquals(-2L, -2.)
	fn.testAssertStrictNotEquals(-2L, func.arrayOf())
	fn.testAssertStrictNotEquals(-2L, func.println)
	fn.testAssertStrictNotEquals(-2L, fp.println)
	fn.testAssertStrictNotEquals(-2L, $[void])
	fn.testAssertStrictNotEquals(-2L, 2L)
	fn.testAssertStrictNotEquals(-2L, -3L)
}
{
	fn.testSubUnit(FLOAT [Strict equals])
	
	fn.testAssertStrictEquals(-2.f, func.float(-2))
}
{
	fn.testSubUnit(FLOAT [Strict not equals])
	
	fn.testAssertStrictNotEquals(-2.f, $void)
	fn.testAssertStrictNotEquals(-2.f, null)
	fn.testAssertStrictNotEquals(-2.f, abc)
	fn.testAssertStrictNotEquals(-2.f, a)
	fn.testAssertStrictNotEquals(-2.f, -2)
	fn.testAssertStrictNotEquals(-2.f, -2L)
	fn.testAssertStrictNotEquals(-2.f, 2.)
	fn.testAssertStrictNotEquals(-2.f, func.arrayOf())
	fn.testAssertStrictNotEquals(-2.f, func.println)
	fn.testAssertStrictNotEquals(-2.f, fp.println)
	fn.testAssertStrictNotEquals(-2.f, $[void])
	fn.testAssertStrictNotEquals(-2.f, 2.f)
	fn.testAssertStrictNotEquals(-2.f, -2.1f)
}
{
	fn.testSubUnit(DOUBLE [Strict equals])
	
	fn.testAssertStrictEquals(-2., fn.double(-2))
}
{
	fn.testSubUnit(DOUBLE [Strict not equals])
	
	fn.testAssertStrictNotEquals(-2., $void)
	fn.testAssertStrictNotEquals(-2., null)
	fn.testAssertStrictNotEquals(-2., abc)
	fn.testAssertStrictNotEquals(-2., a)
	fn.testAssertStrictNotEquals(-2., -2)
	fn.testAssertStrictNotEquals(-2., -2L)
	fn.testAssertStrictNotEquals(-2., -2.f)
	fn.testAssertStrictNotEquals(-2., func.arrayOf())
	fn.testAssertStrictNotEquals(-2., func.println)
	fn.testAssertStrictNotEquals(-2., fp.println)
	fn.testAssertStrictNotEquals(-2., $[void])
	fn.testAssertStrictNotEquals(-2., 2.)
	fn.testAssertStrictNotEquals(-2., -2.1)
}
{
	fn.testSubUnit(ARRAY [Empty, Strict equals])
	
	fn.testAssertStrictEquals(func.arrayOf(), parser.op([]))
	fn.testAssertStrictEquals(func.arrayOf(), func.arrayCreate(0))
}
{
	fn.testSubUnit(ARRAY [Empty, Strict not equals])
	
	fn.testAssertStrictNotEquals(func.arrayOf(), $void)
	fn.testAssertStrictNotEquals(func.arrayOf(), null)
	fn.testAssertStrictNotEquals(func.arrayOf(), abc)
	fn.testAssertStrictNotEquals(func.arrayOf(), a)
	fn.testAssertStrictNotEquals(func.arrayOf(), -2)
	fn.testAssertStrictNotEquals(func.arrayOf(), -2L)
	fn.testAssertStrictNotEquals(func.arrayOf(), -2.f)
	fn.testAssertStrictNotEquals(func.arrayOf(), -2.)
	fn.testAssertStrictNotEquals(func.arrayOf(), func.arrayOf(1, 2, 3))
	fn.testAssertStrictNotEquals(func.arrayOf(), func.arrayOf(1, 2, 3, a, b, c))
	fn.testAssertStrictNotEquals(func.arrayOf(), func.println)
	fn.testAssertStrictNotEquals(func.arrayOf(), $[void])
	fn.testAssertStrictNotEquals(func.arrayCreate(0), $void)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), null)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), abc)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), a)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), -2)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), -2L)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), -2.)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), -2.f)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), func.arrayOf(1, 2, 3))
	fn.testAssertStrictNotEquals(func.arrayCreate(0), func.arrayOf(1, 2, 3, a, b, c))
	fn.testAssertStrictNotEquals(func.arrayCreate(0), func.println)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), fp.println)
	fn.testAssertStrictNotEquals(func.arrayCreate(0), $[void])
}
{
	fn.testSubUnit(ARRAY [Not empty, Single Data Type, Strict equals])
	
	fn.testAssertStrictEquals(func.arrayOf(1, 2, 3), parser.op([1, 2, 3]))
	fn.testAssertStrictEquals(func.arrayOf(a, b, c), parser.op([a, b, c]))
	fn.testAssertStrictEquals(func.arrayOf(null, null), parser.op([null, null]))
	fn.testAssertStrictEquals(func.arrayOf(null, null), fn.arrayCreate(2))
}
{
	fn.testSubUnit(ARRAY [Not empty, Single Data Type, Strict not equals])
	
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), func.arrayOf(3, 2, 1))
	fn.testAssertStrictNotEquals(func.arrayOf(a, b, c), func.arrayOf(c, b, a))
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), $void)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), null)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), abc)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), a)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), func.arrayOf(1\e, 2\e, 3\e))
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), -2)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), -2.)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), func.arrayOf())
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), func.arrayOf(1, 2, 3, a, b, c))
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), func.println)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), fp.println)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), $[void])
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), func.arrayOf(1, 2))
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3), func.arrayOf(1, 2, 3, 4))
}
{
	fn.testSubUnit(ARRAY [Not empty, Multiple Data Type, Strict equals])
	
	fn.testAssertStrictEquals(func.arrayOf(1, 2, 3, a, b, c), parser.op([1, 2, 3, a, b, c]))
}
{
	fn.testSubUnit(ARRAY [Not empty, Multiple Data Type, Strict not equals])
	
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), $void)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), null)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), abc)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), a)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), -2)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), -2L)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), -2.f)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), -2.)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), func.arrayOf())
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), func.arrayOf(1, 2, 3))
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), func.println)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), fp.println)
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), $[void])
	fn.testAssertStrictNotEquals(func.arrayOf(1, 2, 3, a, b, c), func.arrayOf(1, 2, 3, a, b, c, d))
}
{
	fn.testSubUnit(VAR_POINTER [Strict equals])
	
	fn.testAssertStrictEquals($[void], $[void])
}
{
	fn.testSubUnit(VAR_POINTER [Strict not equals])
	
	fn.testAssertStrictNotEquals($[void], $void)
	fn.testAssertStrictNotEquals($[void], null)
	fn.testAssertStrictNotEquals($[void], abc)
	fn.testAssertStrictNotEquals($[void], a)
	fn.testAssertStrictNotEquals($[void], -2)
	fn.testAssertStrictNotEquals($[void], -2L)
	fn.testAssertStrictNotEquals($[void], -2.f)
	fn.testAssertStrictNotEquals($[void], -2.)
	fn.testAssertStrictNotEquals($[void], func.arrayOf(1, 2, 3))
	fn.testAssertStrictNotEquals($[void], func.arrayOf(1, 2, 3, a, b, c))
	fn.testAssertStrictNotEquals($[void], func.println)
	fn.testAssertStrictNotEquals($[void], fp.println)
	fn.testAssertStrictNotEquals($[void], $[test])
}
{
	fn.testSubUnit(VAR_POINTER [Dereferencing & Referencing, Strict equals])
	
	fn.testAssertStrictEquals($ptr, $[test])
	fn.testAssertStrictEquals($*[void], $void)
	fn.testAssertStrictEquals($*[test], $test)
	fn.testAssertStrictEquals($*ptr, $test)
	fn.testAssertStrictEquals($*[ptr], $[test])
	fn.testAssertStrictEquals($**[test], $**ptr)
	fn.testAssertStrictEquals($**[[void]], $void)
	fn.testAssertStrictEquals($**[[test]], $test)
	fn.testAssertStrictEquals($**[ptr], $test)
	fn.testAssertStrictEquals($**[ptr], $**[[test]])
	fn.testAssertStrictEquals($**[[[void]]], $[void])
	fn.testAssertStrictEquals($**[[[test]]], $[test])
	fn.testAssertStrictEquals($**[[ptr]], $ptr)
	fn.testAssertStrictEquals($**[[ptr]], $[test])
	fn.testAssertNull($**[void])
	fn.testAssertNull($**[test])
	fn.testAssertNull($**ptr)
}
{
	fn.testSubUnit(VAR_POINTER [Dereferencing & Referencing, Strict not equals])
	
	fn.testAssertStrictNotEquals($ptr, $test)
	fn.testAssertStrictNotEquals($*[void], $[void])
	fn.testAssertStrictNotEquals($*[test], $[test])
	fn.testAssertStrictNotEquals($*ptr, $[test])
}
{
	fn.testSubUnit(FUNCTION_POINTER [Strict equals])
	
	fn.testAssertStrictEquals(fp.test, fp.test)
	fn.testAssertStrictEquals(fp.test, fp.test2)
	fn.testAssertStrictEquals(func.println, func.println)
	fn.testAssertStrictEquals(fp.println, func.println)
}
{
	fn.testSubUnit(FUNCTION_POINTER [Strict not equals])
	
	fn.testAssertStrictNotEquals(fp.test, $void)
	fn.testAssertStrictNotEquals(fp.test, null)
	fn.testAssertStrictNotEquals(fp.test, abc)
	fn.testAssertStrictNotEquals(fp.test, a)
	fn.testAssertStrictNotEquals(fp.test, -2)
	fn.testAssertStrictNotEquals(fp.test, -2L)
	fn.testAssertStrictNotEquals(fp.test, -2.f)
	fn.testAssertStrictNotEquals(fp.test, -2.)
	fn.testAssertStrictNotEquals(fp.test, func.arrayOf())
	fn.testAssertStrictNotEquals(fp.test, func.println)
	fn.testAssertStrictNotEquals(fp.test, fp.println)
	fn.testAssertStrictNotEquals(fp.test, $[void])
}
{
	fn.testSubUnit(BYTE_BUFFER [Strict equals])
	
	fn.testAssertStrictEquals(fn.byteBufferOf(2, 3, 4), fn.byteBufferOf(258, 259, 260))
	fn.testAssertStrictEquals(fn.byteBufferOf(2, 3, 4), fn.byteBufferOf(-254, -253, -252))
}
{
	fn.testSubUnit(BYTE_BUFFER [Strict not equals])
	
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), $void)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), null)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), abc)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), a)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), -2)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), -2L)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), -2.f)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), -2.)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), func.arrayOf())
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), func.arrayOf(2, 3, 4))
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), func.println)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), fp.println)
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), $[void])
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), fn.byteBufferOf(2, 3, 5))
	fn.testAssertStrictNotEquals(fn.byteBufferOf(2, 3, 4), fn.byteBufferOf(2, 3, 4, 5))
}
{
	fn.testSubUnit(TYPE [Strict equals])
	
	fn.testAssertStrictEquals($LANG_TYPE_INT, fn.typeOf(2))
	fn.testAssertStrictEquals($LANG_TYPE_TYPE, fn.typeOf($LANG_TYPE_LONG))
}
{
	fn.testSubUnit(TYPE [Strict not equals])
	
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, $void)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, null)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, abc)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, a)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, -2)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, -2L)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, -2.f)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, -2.)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, func.arrayOf())
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, func.arrayOf(2, 3, 4))
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, func.println)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, fp.println)
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, $[void])
	fn.testAssertStrictNotEquals($LANG_TYPE_INT, $LANG_TYPE_LONG)
}
