lang.name = Lang Tests (Multiline Texts)
lang.version = v1.0.0

lang.test = 1

# Tests
fn.testUnit(Multiline Texts)
{
	fn.testSubUnit(Empty Text)
	
	fn.testAssertStrictEquals({{{}}}, \e)
}
{
	fn.testSubUnit(Text with length 1)
	
	fn.testAssertStrictEquals({{{a}}}, a\e)
	fn.testAssertStrictEquals({{{0}}}, 0\e)
	fn.testAssertStrictEquals({{{.}}}, .\e)
	fn.testAssertStrictEquals({{{;}}}, ;\e)
}
{
	fn.testSubUnit(Multiline Text)
	
	fn.testAssertStrictEquals({{{abc}}}, abc)
	fn.testAssertStrictEquals(\\{{{abc}}}, \\abc)
	fn.testAssertStrictEquals(\\\\{{{abc}}}, \\\\abc)
	fn.testAssertStrictEquals(\\\\\\{{{abc}}}, \\\\\\abc)
}
{
	fn.testSubUnit(No Multiline Text)
	
	fn.testAssertStrictEquals(\{{{abc}}}, \{\{\{abc\}\}\})
	fn.testAssertStrictEquals(\\\{{{abc}}}, \\\{\{\{abc\}\}\})
	fn.testAssertStrictEquals(\\\\\{{{abc}}}, \\\\\{\{\{abc\}\}\})
	fn.testAssertStrictEquals(\\\\\\\{{{abc}}}, \\\\\\\{\{\{abc\}\}\})
}
{
	fn.testSubUnit(Backslashes in multiline Text)
	
	fn.testAssertStrictEquals({{{\}}}, \\\e)
	fn.testAssertStrictEquals({{{\\}}}, \\\\)
	fn.testAssertStrictEquals({{{\\\}}}, \\\\\\)
	fn.testAssertStrictEquals({{{abc\}}}, abc\\)
	fn.testAssertStrictEquals({{{abc\\}}}, abc\\\\)
	fn.testAssertStrictEquals({{{abc\\\}}}, abc\\\\\\)
	fn.testAssertStrictEquals({{{\abc}}}, \\abc)
	fn.testAssertStrictEquals({{{\\abc}}}, \\\\abc)
	fn.testAssertStrictEquals({{{\\\abc}}}, \\\\\\abc)
	fn.testAssertStrictEquals({{{\abc\}}}, \\abc\\)
	fn.testAssertStrictEquals({{{\\abc\\}}}, \\\\abc\\\\)
	fn.testAssertStrictEquals({{{\\\abc\\\}}}, \\\\\\abc\\\\\\)
}
{
	fn.testSubUnit(\# in multiline Text)
	
	fn.testAssertStrictEquals({{{#}}}, \#\e)
	fn.testAssertStrictEquals({{{##}}}, \#\#)
	fn.testAssertStrictEquals({{{\##}}}, \\\#\#)
	fn.testAssertStrictEquals({{{##\}}}, \#\#\\)
	fn.testAssertStrictEquals({{{#\#}}}, \#\\\#)
	fn.testAssertStrictEquals({{{\#\#\}}}, \\\#\\\#\\)
}
{
	fn.testSubUnit(\\{ and \\} in multiline Text)
	
	fn.testAssertStrictEquals({{{\{}}}, \\{)
	fn.testAssertStrictEquals({{{\{\e}}}, \\{\\e)
	fn.testAssertStrictEquals({{{\{\{\e}}}, \\{\\{\\e)
	fn.testAssertStrictEquals({{{\e\{\e}}}, \\e\\{\\e)
	fn.testAssertStrictEquals({{{\{\{}}}, \\{\\{)
	fn.testAssertStrictEquals({{{\}}}}, \\})
	fn.testAssertStrictEquals({{{\}\e}}}, \\}\\e)
	fn.testAssertStrictEquals({{{\}\}\e}}}, \\}\\}\\e)
	fn.testAssertStrictEquals({{{\e\}\e}}}, \\e\\}\\e)
	fn.testAssertStrictEquals({{{\}\}}}}, \\}\\})
}
{
	fn.testSubUnit(Multiple lines in multiline Text)
	
	fn.testAssertStrictEquals({{{
}}}, \n\e)
	fn.testAssertStrictEquals({{{

}}}, \n\n)
	fn.testAssertStrictEquals({{{


}}}, \n\n\n)
	fn.testAssertStrictEquals({{{
	
	
	}}}, \n\t\n\t\n\t\e)
}
{
	fn.testSubUnit(Line continuation sequence in multiline Text)
	
	fn.testAssertStrictEquals({{{\
}}}, \\\n)
	fn.testAssertStrictEquals({{{\\
}}}, \\\\\n)
	fn.testAssertStrictEquals({{{\\\
}}}, \\\\\\\n)
	fn.testAssertStrictEquals({{{\
\}}}, \\\n\\)
	fn.testAssertStrictEquals({{{abc\
def}}}, abc\\\ndef)
}
{
	fn.testSubUnit(No execution in multiline Text)
	
	fn.testAssertStrictEquals({{{$a = 1}}}, \$a \= 1)
	fn.testAssertStrictEquals({{{fn.testAssertFail(Code was executed inside multiline Text)}}}, func\.langTestAssertFail(Code was executed inside multiline Text))
	fn.testAssertStrictEquals({{{con.if(1)
fn.testAssertFail(Code was executed inside multiline Text)
con.endif}}}, con\.if(1)\nfunc\.langTestAssertFail(Code was executed inside multiline Text)\ncon\.endif)
}
