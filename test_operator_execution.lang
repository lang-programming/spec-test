lang.name = Lang Tests (Operator Execution)
lang.version = v1.0.0

lang.test = 1

# Load helper library
linker.bindLibrary(helper_lib.lang)

# Preparation
$null $= tracked(null)

$0 $= tracked(0)
$1 $= tracked(1)
$2 $= tracked(2)
$3 $= tracked(3)
$4 $= tracked(4)
$5 $= tracked(5)
$6 $= tracked(6)
$7 $= tracked(7)
$8 $= tracked(8)
$10 $= tracked(10)
$61 $= tracked(61)

$d125f $= tracked(.125f)

$1d6 $= tracked(1.6)
$3d8 $= tracked(3.8)

$2d $= tracked(2.)

$comp0c1 $= tracked(complex(0, 1))
$comp2c4 $= tracked(complex(2, 4))
$comp3c4 $= tracked(complex(3, 4))

$abcd $= tracked(abcd)
$test $= tracked(test)
$xyz $= tracked(xyz)

$arrEmpty $= tracked([])

# Tests
fn.testUnit(Operator Execution)
{
	fn.testSubUnit(Operator Execution '-2 ** +|5')

    fp.resetTracking()

    $result $= -$2 ** +|$5
    $executionSteps $= getTracking()

    $expectedResult = -64
    $expectedExecutionSteps $= [\
        [INC, [5], 6],\
        [POW, [2, 6], 64],\
        [INV, [64], -64]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '5 / 2 + 3 * -5')

    fp.resetTracking()

    $result $= $5 / $2 + $3 * -$5
    $executionSteps $= getTracking()

    $expectedResult = -12.5
    $expectedExecutionSteps $= [\
        [DIV, [5, 2], 2.5],\
        [INV, [5], -5],\
        [MUL, [3, -5], -15],\
        [ADD, [2.5, -15], -12.5]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '^-3 ** @abcd')

    fp.resetTracking()

    $result $= ^-$3 ** @$abcd
    $executionSteps $= getTracking()

    $expectedResult = -81
    $expectedExecutionSteps $= [\
        [LEN, [abcd], 4],\
        [POW, [3, 4], 81],\
        [INV, [81], -81],\
        [DEEP_COPY, [-81], -81]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '-^3 ** @abcd')

    fp.resetTracking()

    $result $= -^$3 ** @$abcd
    $executionSteps $= getTracking()

    $expectedResult = -81
    $expectedExecutionSteps $= [\
        [DEEP_COPY, [3], 3],\
        [LEN, [abcd], 4],\
        [POW, [3, 4], 81],\
        [INV, [81], -81]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '63 % 7 // 4 ^/ 5 / .125f * 6 + (8 - 2.)')

    fp.resetTracking()

    $result $= $61 % $7 // $4 ^/ $5 / $d125f * $6 + ($8 - $2d)
    $executionSteps $= getTracking()

    $expectedResult = 54.
    $expectedExecutionSteps $= [\
        [MOD, [61, 7], 5],\
        [FLOOR_DIV, [5, 4], 1],\
        [CEIL_DIV, [1, 5], 1],\
        [DIV, [1, .125f], 8.f],\
        [MUL, [8.f, 6], 48.f],\
        [SUB, [8, 2.], 6.],\
        [ADD, [48.f, 6.], 54.]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '(-((4 + 3 ||| xyz)[1] ||| test))[0][3 ** 0 - 1] + 4 ** 2 ** 3 - (2 - 4 << 3 >>> 6 >> 10) | 3 ^ 5 & 2 - 1 * 4')

    fp.resetTracking()

    $result $= (-(($4 + $3 ||| $xyz)[$1] ||| $test))[$0][$3 ** $0 - $1] + $4 ** $2 ** $3 - ($2 - $4 << $3 >>> $6 >> $10) | $3 ^ $5 & $2 - $1 * $4
    $executionSteps $= getTracking()

    $expectedResult = 119
    $expectedExecutionSteps $= [\
        [ADD, [4, 3], 7],\
        [CONCAT, [7, {{{xyz}}}], {{{7xyz}}}],\
        [GET_ITEM, [{{{7xyz}}}, 1], fn.char(x)],\
        [CONCAT, [fn.char(x), {{{test}}}], {{{xtest}}}],\
        [INV, [{{{xtest}}}], {{{tsetx}}}],\
        [GET_ITEM, [{{{tsetx}}}, 0], fn.char(t)],\
        [POW, [3, 0], 1],\
        [SUB, [1, 1], 0],\
        [GET_ITEM, [fn.char(t), 0], fn.char(t)],\
        [POW, [2, 3], 8],\
        [POW, [4, 8], 65536],\
        [ADD, [fn.char(t), 65536], 65652],\
        [SUB, [2, 4], -2],\
        [LSHIFT, [-2, 3], -16],\
        [RZSHIFT, [-16, 6], 67108863],\
        [RSHIFT, [67108863, 10], 65535],\
        [SUB, [65652, 65535], 117],\
        [MUL, [1, 4], 4],\
        [SUB, [2, 4], -2],\
        [AND, [5, -2], 4],\
        [XOR, [3, 4], 7],\
        [OR, [117, 7], 119]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '([1 * 8, -2, 3 ** 2] ||| [4 + 1, 5 + 0])[@[1, 2 * -1, 3] - @[]] + @[[], [] + 2 + 5 + []]')

    fp.resetTracking()

    $result $= (tracked([$1 * $8, -$2, $3 ** $2]) ||| tracked([$4 + $1, $5 + $0]))[@tracked([$1, $2 * -$1, $3]) - @$arrEmpty] + @tracked([$arrEmpty, $arrEmpty + $2 + $5 + $arrEmpty])
    $executionSteps $= getTracking()

    $expectedResult = 7
    $expectedExecutionSteps $= [\
        [MUL, [1, 8], 8],\
        [INV, [2], -2],\
        [POW, [3, 2], 9],\
        [ADD, [4, 1], 5],\
        [ADD, [5, 0], 5],\
        [CONCAT, [[tracked(8), tracked(-2), tracked(9)], [tracked(5), tracked(5)]], [tracked(8), tracked(-2), tracked(9), tracked(5), tracked(5)]],\
        [INV, [1], -1],\
        [MUL, [2, -1], -2],\
        [LEN, [[tracked(1), tracked(-2), tracked(3)]], 3],\
        [LEN, [[]], 0],\
        [SUB, [3, 0], 3],\
        [GET_ITEM, [[tracked(8), tracked(-2), tracked(9), tracked(5), tracked(5)], 3], tracked(5)],\
        [ADD, [[], 2], [2]],\
        [ADD, [[2], 5], [2, 5]],\
        [ADD, [[2, 5], []], [2, 5, []]],\
        [LEN, [[tracked([]), tracked([2, 5, []])]], 2],\
        [ADD, [5, 2], 7]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '1 + 2 * (3 + 2 ?? 4 + 5) + (3 - 2 - 1 ?: 4 ** -1) + (null ?? 2 * 7) + (7 // 5 ?: 1 ** 3) \
- (null ?: 7 * 4) * (2 - 3 + 1 ? 2 ** 5 : 3 - 5) / (1 ** -2 ? 3 + 4 : -10)')

    fp.resetTracking()

    $result $= $1 + $2 * ($3 + $2 ?? $4 + $5) + ($3 - $2 - $1 ?: $4 ** -$1) + (null ?? $2 * $7) + ($7 // $5 ?: $1 ** $3) \
- ($null ?: $7 * $4) * ($2 - $3 + $1 ? $2 ** $5 : $3 - $5) / ($1 ** -$2 ? $3 + $4 : -$10)
    $executionSteps $= getTracking()

    $expectedResult = 34.25
    $expectedExecutionSteps $= [\
        [ADD, [3, 2], 5],\
        [MUL, [2, 5], 10],\
        [ADD, [1, 10], 11],\
        [SUB, [3, 2], 1],\
        [SUB, [1, 1], 0],\
        [INV, [1], -1],\
        [POW, [4, -1], .25],\
        [ADD, [11, .25], 11.25],\
        [MUL, [2, 7], 14],\
        [ADD, [11.25, 14], 25.25],\
        [FLOOR_DIV, [7, 5], 1],\
        [ADD, [25.25, 1], 26.25],\
        [MUL, [7, 4], 28],\
        [SUB, [2, 3], -1],\
        [ADD, [-1, 1], 0],\
        [SUB, [3, 5], -2],\
        [MUL, [28, -2], -56],\
        [INV, [2], -2],\
        [POW, [1, -2], 1.],\
        [ADD, [3, 4], 7],\
        [DIV, [-56, 7], -8],\
        [SUB, [26.25, -8], 34.25]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '1 - 2 ** 0 || 4 ** 3 || 5 - 6')

    fp.resetTracking()

    $result $= tracked($1 - $2 ** $0 || $4 ** $3 || $5 - $6)
    $executionSteps $= getTracking()

    $expectedResult = 1
    $expectedExecutionSteps $= [\
        [POW, [2, 0], 1],\
        [SUB, [1, 1], 0],\
        [POW, [4, 3], 64]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '1 - 2 ** 0 && 4 ** 3 && 5 - 6')

    fp.resetTracking()

    $result $= tracked($1 - $2 ** $0 && $4 ** $3 && $5 - $6)
    $executionSteps $= getTracking()

    $expectedResult = 0
    $expectedExecutionSteps $= [\
        [POW, [2, 0], 1],\
        [SUB, [1, 1], 0]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution 'abs(((2 + complex(0, 1)) - complex(3, 4) * complex(0, 1)) / complex(2, 4) + 3.8 - 1.6 * complex(0, 1))')

    fp.resetTracking()

    $result $= abs((($2 + $comp0c1) - $comp3c4 * $comp0c1) / $comp2c4 + $3d8 - $1d6 * $comp0c1)
    $executionSteps $= getTracking()

    $expectedResult = 5.
    $expectedExecutionSteps $= [\
        [ADD, [2, complex(0., 1.)], complex(2., 1.)],\
        [MUL, [complex(3., 4.), complex(0., 1.)], complex(-4., 3.)],\
        [SUB, [complex(2., 1.), complex(-4., 3.)], complex(6., -2.)],\
        [DIV, [complex(6., -2.), complex(2., 4.)], complex(.2, -1.4)],\
        [ADD, [complex(.2, -1.4), 3.8], complex(4., -1.4)],\
        [MUL, [1.6, complex(0., 1.)], complex(0., 1.6)],\
        [SUB, [complex(4., -1.4), complex(0., 1.6)], complex(4., -3.)],\
        [ABS, [complex(4., -3.)], 5.]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
