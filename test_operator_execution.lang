lang.name = Lang Tests (Operator Execution)
lang.version = v1.0.0

lang.test = 1

# Load helper library
linker.bindLibrary(helper_lib.lang)

# Preparation
$0 $= tracked(0)
$1 $= tracked(1)
$2 $= tracked(2)
$3 $= tracked(3)
$4 $= tracked(4)
$5 $= tracked(5)
$6 $= tracked(6)
$7 $= tracked(7)
$8 $= tracked(8)
$10 $= tracked(10)
$61 $= tracked(61)

$d125f $= tracked(.125f)

$2d $= tracked(2.)

$abcd $= tracked(abcd)
$test $= tracked(test)
$xyz $= tracked(xyz)

# Tests
fn.testUnit(Operator Execution)
{
	fn.testSubUnit(Operator Execution '-2 ** +|5')

    fp.resetTracking()

    $result $= -$2 ** +|$5
    $executionSteps $= getTracking()

    $expectedResult = -64
    $expectedExecutionSteps $= [\
        [INC, [5], 6],\
        [POW, [2, 6], 64],\
        [INV, [64], -64]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '5 / 2 + 3 * -5')

    fp.resetTracking()

    $result $= $5 / $2 + $3 * -$5
    $executionSteps $= getTracking()

    $expectedResult = -12.5
    $expectedExecutionSteps $= [\
        [DIV, [5, 2], 2.5],\
        [INV, [5], -5],\
        [MUL, [3, -5], -15],\
        [ADD, [2.5, -15], -12.5]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '^-3 ** @abcd')

    fp.resetTracking()

    $result $= ^-$3 ** @$abcd
    $executionSteps $= getTracking()

    $expectedResult = -81
    $expectedExecutionSteps $= [\
        [LEN, [abcd], 4],\
        [POW, [3, 4], 81],\
        [INV, [81], -81],\
        [DEEP_COPY, [-81], -81]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '-^3 ** @abcd')

    fp.resetTracking()

    $result $= -^$3 ** @$abcd
    $executionSteps $= getTracking()

    $expectedResult = -81
    $expectedExecutionSteps $= [\
        [DEEP_COPY, [3], 3],\
        [LEN, [abcd], 4],\
        [POW, [3, 4], 81],\
        [INV, [81], -81]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '63 % 7 // 4 ^/ 5 / .125f * 6 + (8 - 2.)')

    fp.resetTracking()

    $result $= $61 % $7 // $4 ^/ $5 / $d125f * $6 + ($8 - $2d)
    $executionSteps $= getTracking()

    $expectedResult = 54.
    $expectedExecutionSteps $= [\
        [MOD, [61, 7], 5],\
        [FLOOR_DIV, [5, 4], 1],\
        [CEIL_DIV, [1, 5], 1],\
        [DIV, [1, .125f], 8.f],\
        [MUL, [8.f, 6], 48.f],\
        [SUB, [8, 2.], 6.],\
        [ADD, [48.f, 6.], 54.]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
{
	fn.testSubUnit(Operator Execution '(-((4 + 3 ||| xyz)[1] ||| test))[0][3 ** 0 - 1] + 4 ** 2 ** 3 - (2 - 4 << 3 >>> 6 >> 10) | 3 ^ 5 & 2 - 1 * 4')

    fp.resetTracking()

    $result $= (-(($4 + $3 ||| $xyz)[$1] ||| $test))[$0][$3 ** $0 - $1] + $4 ** $2 ** $3 - ($2 - $4 << $3 >>> $6 >> $10) | $3 ^ $5 & $2 - $1 * $4
    $executionSteps $= getTracking()

    $expectedResult = 119
    $expectedExecutionSteps $= [\
        [ADD, [4, 3], 7],\
        [CONCAT, [7, {{{xyz}}}], {{{7xyz}}}],\
        [GET_ITEM, [{{{7xyz}}}, 1], fn.char(x)],\
        [CONCAT, [fn.char(x), {{{test}}}], {{{xtest}}}],\
        [INV, [{{{xtest}}}], {{{tsetx}}}],\
        [GET_ITEM, [{{{tsetx}}}, 0], fn.char(t)],\
        [POW, [3, 0], 1],\
        [SUB, [1, 1], 0],\
        [GET_ITEM, [fn.char(t), 0], fn.char(t)],\
        [POW, [2, 3], 8],\
        [POW, [4, 8], 65536],\
        [ADD, [fn.char(t), 65536], 65652],\
        [SUB, [2, 4], -2],\
        [LSHIFT, [-2, 3], -16],\
        [RZSHIFT, [-16, 6], 67108863],\
        [RSHIFT, [67108863, 10], 65535],\
        [SUB, [65652, 65535], 117],\
        [MUL, [1, 4], 4],\
        [SUB, [2, 4], -2],\
        [AND, [5, -2], 4],\
        [XOR, [3, 4], 7],\
        [OR, [117, 7], 119]\
    ]

    fp.testAssertOperationExecution($result, $executionSteps, $expectedResult, $expectedExecutionSteps)
}
