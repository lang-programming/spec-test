lang.name = Lang Tests (Lang Data & Execution Flags)
lang.version = v1.0.0

lang.test = 1

# Preparation
# ...

# Tests
fn.testUnit(Lang Data & Execution Flags)
nontry {
	fn.testSubUnit(lang.version - Current version)
	
	try {
		lang.errorOutput = 0
		lang.version = v1.0.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_NO_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.00.00
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_NO_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v01.00.00
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_NO_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.000.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_NO_ERROR)
	}
}
nontry {
	fn.testSubUnit(lang.version - Older version)
	
	try {
		lang.errorOutput = 0
		lang.version = v0.99.99
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_WARNING)
	}
}
nontry {
	fn.testSubUnit(lang.version - Newer version)
	
	try {
		lang.errorOutput = 0
		lang.version = v1.0.99
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.99.99
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v99.99.99
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
}
nontry {
	fn.testSubUnit(lang.version - Invalid version format)
	
	try {
		lang.errorOutput = 0
		lang.version = \e
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = xyz
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = 1.0.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = y1.0.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v100
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.00
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v..
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v..0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = va.b.c
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.b.c
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.0.c
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.b.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v-1.0.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.0.-99
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v-1.-99.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.-99.1
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.99.-99
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.-0.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.0.- 0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.0.-0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v1.--0.0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v0.0.2147483648
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v0,0,0
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
	
	try {
		lang.errorOutput = 0
		lang.version = v0.0.100,000
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
}
nontry {
	fn.testSubUnit(lang.version - null-Node [Forced node split])
	
	try {
		lang.errorOutput = 0
		lang.version = \!
	}finally {
		lang.errorOutput = 1
		fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
	}
}

# Reset
lang.version = v1.0.0
