lang.name = Lang Tests (Formats)
lang.version = v1.0.0

lang.test = 1

# Preparation
oranges.with.count = [0,2+]{count} oranges;[1]1 orange
oranges.without.count = [0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges
abc = test
def = 20
10 = txt2
-10 = abc
null = nul
$null

# Tests
fn.testUnit(Formats)
{
    fn.testSubUnit(Without format sequences)
    
    fn.testAssertStrictEquals(func.format(abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(def), {{{def}}})
    fn.testAssertStrictEquals(func.format(10), {{{10}}})
    fn.testAssertStrictEquals(func.format(-10), {{{-10}}})
    fn.testAssertStrictEquals(func.format($null), {{{null}}})
}
{
    fn.testSubUnit(Basic format sequences)
    
    fn.testAssertEquals(func.format(%%), {{{%}}})
    fn.testAssertEquals(func.format(%%%%), %%)

    fn.testAssertEquals(func.format(%n), $LANG_OS_LINE_SEPARATOR)
}
{
    fn.testSubUnit(Text format sequences [No size])
    
    fn.testAssertStrictEquals(func.format(%s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size])
    
    fn.testAssertStrictEquals(func.format(%5s, abc), {{{  abc}}})
    fn.testAssertStrictEquals(func.format(%5s, def), {{{  def}}})
    fn.testAssertStrictEquals(func.format(%5s, 10), {{{   10}}})
    fn.testAssertStrictEquals(func.format(%5s, -10), {{{  -10}}})
    fn.testAssertStrictEquals(func.format(%5s, $null), {{{ null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Too long text])
    
    fn.testAssertStrictEquals(func.format(%1s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%1s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%1s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%1s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%1s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Exact size match])
    
    fn.testAssertStrictEquals(func.format(%3s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%3s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%2s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%3s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%4s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-5s, abc), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-5s, def), {{{def  }}})
    fn.testAssertStrictEquals(func.format(%-5s, 10), {{{10   }}})
    fn.testAssertStrictEquals(func.format(%-5s, -10), {{{-10  }}})
    fn.testAssertStrictEquals(func.format(%-5s, $null), {{{null }}})
}
{
    fn.testSubUnit(Text format sequences [Size, Too long text, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-1s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-1s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-1s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-1s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-1s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Exact size match, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-3s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-3s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-2s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-3s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-4s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Size from arguments, Left justify])

    fn.testAssertStrictEquals(func.format(%-*s, 5, abc), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, def), {{{def  }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, 10), {{{10   }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, -10), {{{-10  }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, $null), {{{null }}})
}
{
    fn.testSubUnit(Text format sequences [Size, Size from arguments, Too long text, Left justify])

    fn.testAssertStrictEquals(func.format(%-*s, 1, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Size from argument, Exact size match, Left justify])

    fn.testAssertStrictEquals(func.format(%-*s, 3, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*s, 3, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-*s, 2, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 3, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 4, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size from arguments])

    fn.testAssertStrictEquals(func.format(%*s, 3, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%*[2]s, def, 3), {{{def}}})
    fn.testAssertStrictEquals(func.format(%[1]*[2]s, 10, 2), {{{10}}})
}
{
    fn.testSubUnit(Text format sequences [Pluralization templates])

    fn.testAssertStrictEquals(func.format(%.0s, "[0,2+]{count} oranges;[1]1 orange"), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.1s, "[0,2+]{count} oranges;[1]1 orange"), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.2s, "[0,2+]{count} oranges;[1]1 orange"), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.0s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.1s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.2s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.3s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.6s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.9s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.10s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.11s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.12s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
}
{
    fn.testSubUnit(Text format sequences [Pluralization templates, Count from arguments])
    fn.testAssertStrictEquals(func.format(%.*s, 0, "[0,2+]{count} oranges;[1]1 orange"), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 1, "[0,2+]{count} oranges;[1]1 orange"), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*s, 2, "[0,2+]{count} oranges;[1]1 orange"), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*s, 0, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 1, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*s, 2, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 3, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 6, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 9, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 10, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 11, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 12, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
}
{
    fn.testSubUnit(Text format sequences [Pluralization templates, Count from arguments at index])
    fn.testAssertStrictEquals(func.format(%.*s, 0, "[0,2+]{count} oranges;[1]1 orange"), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 1, "[0,2+]{count} oranges;[1]1 orange"), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*s, 2, "[0,2+]{count} oranges;[1]1 orange"), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 0), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 1), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 2), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 3), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 6), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 9), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 10), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 11), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 12), {{{many oranges}}})
}
{
    fn.testSubUnit(Translation format sequences [No size])
    
    fn.testAssertStrictEquals(func.format(%t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size])
    
    fn.testAssertStrictEquals(func.format(%5t, abc), {{{ test}}})
    fn.testAssertStrictEquals(func.format(%5t, def), {{{   20}}})
    fn.testAssertStrictEquals(func.format(%5t, 10), {{{ txt2}}})
    fn.testAssertStrictEquals(func.format(%5t, -10), {{{  abc}}})
    fn.testAssertStrictEquals(func.format(%5t, $null), {{{  nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Too long text])
    
    fn.testAssertStrictEquals(func.format(%1t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%1t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%1t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%1t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%1t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Exact size match])
    
    fn.testAssertStrictEquals(func.format(%4t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%2t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%4t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%3t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%3t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-5t, abc), {{{test }}})
    fn.testAssertStrictEquals(func.format(%-5t, def), {{{20   }}})
    fn.testAssertStrictEquals(func.format(%-5t, 10), {{{txt2 }}})
    fn.testAssertStrictEquals(func.format(%-5t, -10), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-5t, $null), {{{nul  }}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Too long text, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-1t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-1t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-1t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-1t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-1t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Exact size match, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-4t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-2t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-4t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-3t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-3t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Size from arguments, Left justify])

    fn.testAssertStrictEquals(func.format(%-*t, 5, abc), {{{test }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, def), {{{20   }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, 10), {{{txt2 }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, -10), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, $null), {{{nul  }}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Size from arguments, Too long text, Left justify])

    fn.testAssertStrictEquals(func.format(%-*t, 1, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Size from argument, Exact size match, Left justify])

    fn.testAssertStrictEquals(func.format(%-*t, 4, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-*t, 2, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-*t, 4, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-*t, 3, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*t, 3, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Pluralization templates])

    fn.testAssertStrictEquals(func.format(%.0t, oranges.with.count), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.1t, oranges.with.count), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.2t, oranges.with.count), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.0t, oranges.without.count), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.1t, oranges.without.count), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.2t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.3t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.6t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.9t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.10t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.11t, oranges.without.count), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.12t, oranges.without.count), {{{many oranges}}})
}
{
    fn.testSubUnit(Translation format sequences [Pluralization templates, Count from arguments])
    fn.testAssertStrictEquals(func.format(%.*t, 0, oranges.with.count), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 1, oranges.with.count), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*t, 2, oranges.with.count), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*t, 0, oranges.without.count), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 1, oranges.without.count), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*t, 2, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 3, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 6, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 9, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 10, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 11, oranges.without.count), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 12, oranges.without.count), {{{many oranges}}})
}
{
    fn.testSubUnit(Translation format sequences [Pluralization templates, Count from arguments at index])
    fn.testAssertStrictEquals(func.format(%.*t, 0, oranges.with.count), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 1, oranges.with.count), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*t, 2, oranges.with.count), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 0), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 1), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 2), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 3), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 6), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 9), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 10), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 11), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 12), {{{many oranges}}})
}
{
    fn.testSubUnit(Integer number format sequences [No size])

    fn.testAssertStrictEquals(func.format(%d, 0), {{{0}}})
    fn.testAssertStrictEquals(func.format(%d, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%d, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Force sign])

    fn.testAssertStrictEquals(func.format(%+d, 0), {{{+0}}})
    fn.testAssertStrictEquals(func.format(%+d, 10), {{{+10}}})
    fn.testAssertStrictEquals(func.format(%+d, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%+d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%+d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Space sign])

    fn.testAssertStrictEquals(func.format(% d, 0), {{{ 0}}})
    fn.testAssertStrictEquals(func.format(% d, 10), {{{ 10}}})
    fn.testAssertStrictEquals(func.format(% d, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(% d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(% d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size])

    fn.testAssertStrictEquals(func.format(%3d, 0), {{{  0}}})
    fn.testAssertStrictEquals(func.format(%3d, 10), {{{ 10}}})
    fn.testAssertStrictEquals(func.format(%3d, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%3d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Left aligned])

    fn.testAssertStrictEquals(func.format(%-3d, 0), {{{0  }}})
    fn.testAssertStrictEquals(func.format(%-3d, 10), {{{10 }}})
    fn.testAssertStrictEquals(func.format(%-3d, -1), {{{-1 }}})
    fn.testAssertStrictEquals(func.format(%-3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%-3d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Zero padded])

    fn.testAssertStrictEquals(func.format(%03d, 0), {{{000}}})
    fn.testAssertStrictEquals(func.format(%03d, 10), {{{010}}})
    fn.testAssertStrictEquals(func.format(%03d, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(%03d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%03d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%03d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Force sign])

    fn.testAssertStrictEquals(func.format(%+3d, 0), {{{ +0}}})
    fn.testAssertStrictEquals(func.format(%+3d, 10), {{{+10}}})
    fn.testAssertStrictEquals(func.format(%+3d, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%+3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%+3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+3d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Space sign])

    fn.testAssertStrictEquals(func.format(% 3d, 0), {{{  0}}})
    fn.testAssertStrictEquals(func.format(% 3d, 10), {{{ 10}}})
    fn.testAssertStrictEquals(func.format(% 3d, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(% 3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(% 3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% 3d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Left aligned, Force sign])

    fn.testAssertStrictEquals(func.format(%+-4d, 0), {{{+0  }}})
    fn.testAssertStrictEquals(func.format(%+-4d, 10), {{{+10 }}})
    fn.testAssertStrictEquals(func.format(%+-4d, -1), {{{-1  }}})
    fn.testAssertStrictEquals(func.format(%+-4d, -10), {{{-10 }}})
    fn.testAssertStrictEquals(func.format(%+-4d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+-4d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Left aligned, Space sign])

    fn.testAssertStrictEquals(func.format(% -4d, 0), {{{ 0  }}})
    fn.testAssertStrictEquals(func.format(% -4d, 10), {{{ 10 }}})
    fn.testAssertStrictEquals(func.format(% -4d, -1), {{{-1  }}})
    fn.testAssertStrictEquals(func.format(% -4d, -10), {{{-10 }}})
    fn.testAssertStrictEquals(func.format(% -4d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% -4d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Zero padded, Force sign])

    fn.testAssertStrictEquals(func.format(%+03d, 0), {{{+00}}})
    fn.testAssertStrictEquals(func.format(%+03d, 10), {{{+10}}})
    fn.testAssertStrictEquals(func.format(%+03d, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(%+03d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%+03d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+03d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Zero padded, Space sign])

    fn.testAssertStrictEquals(func.format(% 04d, 0), {{{ 000}}})
    fn.testAssertStrictEquals(func.format(% 04d, 10), {{{ 010}}})
    fn.testAssertStrictEquals(func.format(% 04d, -1), {{{-001}}})
    fn.testAssertStrictEquals(func.format(% 04d, -10), {{{-010}}})
    fn.testAssertStrictEquals(func.format(% 04d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% 04d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Size from var args, Force sign])

    fn.testAssertStrictEquals(func.format(%+*d, 4, 0), {{{  +0}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, 10), {{{ +10}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, -1), {{{  -1}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, -10), {{{ -10}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Size from var args at index, Force sign])

    fn.testAssertStrictEquals(func.format(%+*[2]d, 0, 4), {{{  +0}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, 10, 4), {{{ +10}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, -1, 4), {{{  -1}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, -10, 4), {{{ -10}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, -250L, 4), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, 100.5f, 4), {{{+100}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Decimal places])

    fn.testAssertStrictEquals(func.format("%.2f", 0), {{{0.00}}})
    fn.testAssertStrictEquals(func.format("%.2f", 10.5), {{{10.50}}})
    fn.testAssertStrictEquals(func.format("%.2f", -1.235), {{{-1.24}}})
    fn.testAssertStrictEquals(func.format("%.2f", 5.2345), {{{5.23}}})
    fn.testAssertStrictEquals(func.format("%.2f", -10.f), {{{-10.00}}})
    fn.testAssertStrictEquals(func.format("%.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%.2f", 100.5f), {{{100.50}}})
    fn.testAssertStrictEquals(func.format("%.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+.2f", 0), {{{+0.00}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 10.5), {{{+10.50}}})
    fn.testAssertStrictEquals(func.format("%+.2f", -1.235), {{{-1.24}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 5.2345), {{{+5.23}}})
    fn.testAssertStrictEquals(func.format("%+.2f", -10.f), {{{-10.00}}})
    fn.testAssertStrictEquals(func.format("%+.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% .2f", 0), {{{ 0.00}}})
    fn.testAssertStrictEquals(func.format("% .2f", 10.5), {{{ 10.50}}})
    fn.testAssertStrictEquals(func.format("% .2f", -1.235), {{{-1.24}}})
    fn.testAssertStrictEquals(func.format("% .2f", 5.2345), {{{ 5.23}}})
    fn.testAssertStrictEquals(func.format("% .2f", -10.f), {{{-10.00}}})
    fn.testAssertStrictEquals(func.format("% .2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% .2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% .2f", 2100.21f), {{{ 2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Decimal places])

    fn.testAssertStrictEquals(func.format("%7.2f", 0), {{{   0.00}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 10.5), {{{  10.50}}})
    fn.testAssertStrictEquals(func.format("%7.2f", -1.235), {{{  -1.24}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 5.2345), {{{   5.23}}})
    fn.testAssertStrictEquals(func.format("%7.2f", -10.f), {{{ -10.00}}})
    fn.testAssertStrictEquals(func.format("%7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Left aligned, Decimal places])

    fn.testAssertStrictEquals(func.format("%-7.2f", 0), {{{0.00   }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 10.5), {{{10.50  }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", -1.235), {{{-1.24  }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 5.2345), {{{5.23   }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", -10.f), {{{-10.00 }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 100.5f), {{{100.50 }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Zero padded, Decimal places])

    fn.testAssertStrictEquals(func.format("%07.2f", 0), {{{0000.00}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 10.5), {{{0010.50}}})
    fn.testAssertStrictEquals(func.format("%07.2f", -1.235), {{{-001.24}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 5.2345), {{{0005.23}}})
    fn.testAssertStrictEquals(func.format("%07.2f", -10.f), {{{-010.00}}})
    fn.testAssertStrictEquals(func.format("%07.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 100.5f), {{{0100.50}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+7.2f", 0), {{{  +0.00}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 10.5), {{{ +10.50}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", -1.235), {{{  -1.24}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 5.2345), {{{  +5.23}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", -10.f), {{{ -10.00}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% 7.2f", 0), {{{   0.00}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 10.5), {{{  10.50}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", -1.235), {{{  -1.24}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 5.2345), {{{   5.23}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", -10.f), {{{ -10.00}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 2100.21f), {{{ 2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Left aligned, Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+-7.2f", 0), {{{+0.00  }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 10.5), {{{+10.50 }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", -1.235), {{{-1.24  }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 5.2345), {{{+5.23  }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", -10.f), {{{-10.00 }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Left aligned, Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% -7.2f", 0), {{{ 0.00  }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 10.5), {{{ 10.50 }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", -1.235), {{{-1.24  }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 5.2345), {{{ 5.23  }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", -10.f), {{{-10.00 }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 2100.21f), {{{ 2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Zero padded, Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+07.2f", 0), {{{+000.00}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 10.5), {{{+010.50}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", -1.235), {{{-001.24}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 5.2345), {{{+005.23}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", -10.f), {{{-010.00}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Zero padded, Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% 07.2f", 0), {{{ 000.00}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 10.5), {{{ 010.50}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", -1.235), {{{-001.24}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 5.2345), {{{ 005.23}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", -10.f), {{{-010.00}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 2100.21f), {{{ 2100.21}}})
}
