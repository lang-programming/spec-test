lang.name = Lang Tests (Formats)
lang.version = v1.0.0

lang.test = 1

# Preparation
oranges.with.count = [0,2+]{count} oranges;[1]1 orange
oranges.without.count = [0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges
abc = test
def = 20
10 = txt2
-10 = abc
null = nul
$null

# Tests
fn.testUnit(Formats)
{
    fn.testSubUnit(Without format sequences)
    
    fn.testAssertStrictEquals(func.format(abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(def), {{{def}}})
    fn.testAssertStrictEquals(func.format(10), {{{10}}})
    fn.testAssertStrictEquals(func.format(-10), {{{-10}}})
    fn.testAssertStrictEquals(func.format($null), {{{null}}})
}
{
    fn.testSubUnit(Basic format sequences)
    
    fn.testAssertEquals(func.format(%%), {{{%}}})
    fn.testAssertEquals(func.format(%%%%), %%)

    fn.testAssertEquals(func.format(%n), $LANG_OS_LINE_SEPARATOR)
}
{
    fn.testSubUnit(Text format sequences [No size])
    
    fn.testAssertStrictEquals(func.format(%s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size])
    
    fn.testAssertStrictEquals(func.format(%5s, abc), {{{  abc}}})
    fn.testAssertStrictEquals(func.format(%5s, def), {{{  def}}})
    fn.testAssertStrictEquals(func.format(%5s, 10), {{{   10}}})
    fn.testAssertStrictEquals(func.format(%5s, -10), {{{  -10}}})
    fn.testAssertStrictEquals(func.format(%5s, $null), {{{ null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Too long text])
    
    fn.testAssertStrictEquals(func.format(%1s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%1s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%1s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%1s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%1s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Exact size match])
    
    fn.testAssertStrictEquals(func.format(%3s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%3s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%2s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%3s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%4s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-5s, abc), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-5s, def), {{{def  }}})
    fn.testAssertStrictEquals(func.format(%-5s, 10), {{{10   }}})
    fn.testAssertStrictEquals(func.format(%-5s, -10), {{{-10  }}})
    fn.testAssertStrictEquals(func.format(%-5s, $null), {{{null }}})
}
{
    fn.testSubUnit(Text format sequences [Size, Too long text, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-1s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-1s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-1s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-1s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-1s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Exact size match, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-3s, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-3s, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-2s, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-3s, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-4s, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Size from arguments, Left justify])

    fn.testAssertStrictEquals(func.format(%-*s, 5, abc), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, def), {{{def  }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, 10), {{{10   }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, -10), {{{-10  }}})
    fn.testAssertStrictEquals(func.format(%-*s, 5, $null), {{{null }}})
}
{
    fn.testSubUnit(Text format sequences [Size, Size from arguments, Too long text, Left justify])

    fn.testAssertStrictEquals(func.format(%-*s, 1, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 1, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size, Size from argument, Exact size match, Left justify])

    fn.testAssertStrictEquals(func.format(%-*s, 3, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*s, 3, def), {{{def}}})
    fn.testAssertStrictEquals(func.format(%-*s, 2, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 3, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-*s, 4, $null), {{{null}}})
}
{
    fn.testSubUnit(Text format sequences [Size from arguments])

    fn.testAssertStrictEquals(func.format(%*s, 3, abc), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%*[2]s, def, 3), {{{def}}})
    fn.testAssertStrictEquals(func.format(%[1]*[2]s, 10, 2), {{{10}}})
}
{
    fn.testSubUnit(Text format sequences [Pluralization templates])

    fn.testAssertStrictEquals(func.format(%.0s, "[0,2+]{count} oranges;[1]1 orange"), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.1s, "[0,2+]{count} oranges;[1]1 orange"), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.2s, "[0,2+]{count} oranges;[1]1 orange"), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.0s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.1s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.2s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.3s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.6s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.9s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.10s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.11s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.12s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
}
{
    fn.testSubUnit(Text format sequences [Pluralization templates, Count from arguments])
    fn.testAssertStrictEquals(func.format(%.*s, 0, "[0,2+]{count} oranges;[1]1 orange"), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 1, "[0,2+]{count} oranges;[1]1 orange"), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*s, 2, "[0,2+]{count} oranges;[1]1 orange"), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*s, 0, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 1, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*s, 2, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 3, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 6, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 9, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 10, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 11, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 12, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges"), {{{many oranges}}})
}
{
    fn.testSubUnit(Text format sequences [Pluralization templates, Count from arguments at index])
    fn.testAssertStrictEquals(func.format(%.*s, 0, "[0,2+]{count} oranges;[1]1 orange"), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*s, 1, "[0,2+]{count} oranges;[1]1 orange"), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*s, 2, "[0,2+]{count} oranges;[1]1 orange"), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 0), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 1), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 2), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 3), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 6), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 9), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 10), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 11), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]s, "[0]no oranges;[1]an orange;[2-10]few oranges;[11+]many oranges", 12), {{{many oranges}}})
}
{
    fn.testSubUnit(Translation format sequences [No size])
    
    fn.testAssertStrictEquals(func.format(%t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size])
    
    fn.testAssertStrictEquals(func.format(%5t, abc), {{{ test}}})
    fn.testAssertStrictEquals(func.format(%5t, def), {{{   20}}})
    fn.testAssertStrictEquals(func.format(%5t, 10), {{{ txt2}}})
    fn.testAssertStrictEquals(func.format(%5t, -10), {{{  abc}}})
    fn.testAssertStrictEquals(func.format(%5t, $null), {{{  nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Too long text])
    
    fn.testAssertStrictEquals(func.format(%1t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%1t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%1t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%1t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%1t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Exact size match])
    
    fn.testAssertStrictEquals(func.format(%4t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%2t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%4t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%3t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%3t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-5t, abc), {{{test }}})
    fn.testAssertStrictEquals(func.format(%-5t, def), {{{20   }}})
    fn.testAssertStrictEquals(func.format(%-5t, 10), {{{txt2 }}})
    fn.testAssertStrictEquals(func.format(%-5t, -10), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-5t, $null), {{{nul  }}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Too long text, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-1t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-1t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-1t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-1t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-1t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Exact size match, Left justify])
    
    fn.testAssertStrictEquals(func.format(%-4t, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-2t, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-4t, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-3t, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-3t, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Size from arguments, Left justify])

    fn.testAssertStrictEquals(func.format(%-*t, 5, abc), {{{test }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, def), {{{20   }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, 10), {{{txt2 }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, -10), {{{abc  }}})
    fn.testAssertStrictEquals(func.format(%-*t, 5, $null), {{{nul  }}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Size from arguments, Too long text, Left justify])

    fn.testAssertStrictEquals(func.format(%-*t, 1, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*t, 1, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Size, Size from argument, Exact size match, Left justify])

    fn.testAssertStrictEquals(func.format(%-*t, 4, abc), {{{test}}})
    fn.testAssertStrictEquals(func.format(%-*t, 2, def), {{{20}}})
    fn.testAssertStrictEquals(func.format(%-*t, 4, 10), {{{txt2}}})
    fn.testAssertStrictEquals(func.format(%-*t, 3, -10), {{{abc}}})
    fn.testAssertStrictEquals(func.format(%-*t, 3, $null), {{{nul}}})
}
{
    fn.testSubUnit(Translation format sequences [Pluralization templates])

    fn.testAssertStrictEquals(func.format(%.0t, oranges.with.count), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.1t, oranges.with.count), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.2t, oranges.with.count), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.0t, oranges.without.count), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.1t, oranges.without.count), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.2t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.3t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.6t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.9t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.10t, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.11t, oranges.without.count), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.12t, oranges.without.count), {{{many oranges}}})
}
{
    fn.testSubUnit(Translation format sequences [Pluralization templates, Count from arguments])
    fn.testAssertStrictEquals(func.format(%.*t, 0, oranges.with.count), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 1, oranges.with.count), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*t, 2, oranges.with.count), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*t, 0, oranges.without.count), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 1, oranges.without.count), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*t, 2, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 3, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 6, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 9, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 10, oranges.without.count), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 11, oranges.without.count), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 12, oranges.without.count), {{{many oranges}}})
}
{
    fn.testSubUnit(Translation format sequences [Pluralization templates, Count from arguments at index])
    fn.testAssertStrictEquals(func.format(%.*t, 0, oranges.with.count), {{{0 oranges}}})
    fn.testAssertStrictEquals(func.format(%.*t, 1, oranges.with.count), {{{1 orange}}})
    fn.testAssertStrictEquals(func.format(%.*t, 2, oranges.with.count), {{{2 oranges}}})

    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 0), {{{no oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 1), {{{an orange}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 2), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 3), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 6), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 9), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 10), {{{few oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 11), {{{many oranges}}})
    fn.testAssertStrictEquals(func.format(%.*[2]t, oranges.without.count, 12), {{{many oranges}}})
}
{
    fn.testSubUnit(Integer number format sequences [No size])

    fn.testAssertStrictEquals(func.format(%d, 0), {{{0}}})
    fn.testAssertStrictEquals(func.format(%d, 10), {{{10}}})
    fn.testAssertStrictEquals(func.format(%d, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Force sign])

    fn.testAssertStrictEquals(func.format(%+d, 0), {{{+0}}})
    fn.testAssertStrictEquals(func.format(%+d, 10), {{{+10}}})
    fn.testAssertStrictEquals(func.format(%+d, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%+d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%+d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Space sign])

    fn.testAssertStrictEquals(func.format(% d, 0), {{{ 0}}})
    fn.testAssertStrictEquals(func.format(% d, 10), {{{ 10}}})
    fn.testAssertStrictEquals(func.format(% d, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(% d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(% d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size])

    fn.testAssertStrictEquals(func.format(%3d, 0), {{{  0}}})
    fn.testAssertStrictEquals(func.format(%3d, 10), {{{ 10}}})
    fn.testAssertStrictEquals(func.format(%3d, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%3d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Left aligned])

    fn.testAssertStrictEquals(func.format(%-3d, 0), {{{0  }}})
    fn.testAssertStrictEquals(func.format(%-3d, 10), {{{10 }}})
    fn.testAssertStrictEquals(func.format(%-3d, -1), {{{-1 }}})
    fn.testAssertStrictEquals(func.format(%-3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%-3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%-3d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Zero padded])

    fn.testAssertStrictEquals(func.format(%03d, 0), {{{000}}})
    fn.testAssertStrictEquals(func.format(%03d, 10), {{{010}}})
    fn.testAssertStrictEquals(func.format(%03d, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(%03d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%03d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%03d, 100.5f), {{{100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Force sign])

    fn.testAssertStrictEquals(func.format(%+3d, 0), {{{ +0}}})
    fn.testAssertStrictEquals(func.format(%+3d, 10), {{{+10}}})
    fn.testAssertStrictEquals(func.format(%+3d, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%+3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%+3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+3d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Space sign])

    fn.testAssertStrictEquals(func.format(% 3d, 0), {{{  0}}})
    fn.testAssertStrictEquals(func.format(% 3d, 10), {{{ 10}}})
    fn.testAssertStrictEquals(func.format(% 3d, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(% 3d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(% 3d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% 3d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Left aligned, Force sign])

    fn.testAssertStrictEquals(func.format(%+-4d, 0), {{{+0  }}})
    fn.testAssertStrictEquals(func.format(%+-4d, 10), {{{+10 }}})
    fn.testAssertStrictEquals(func.format(%+-4d, -1), {{{-1  }}})
    fn.testAssertStrictEquals(func.format(%+-4d, -10), {{{-10 }}})
    fn.testAssertStrictEquals(func.format(%+-4d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+-4d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Left aligned, Space sign])

    fn.testAssertStrictEquals(func.format(% -4d, 0), {{{ 0  }}})
    fn.testAssertStrictEquals(func.format(% -4d, 10), {{{ 10 }}})
    fn.testAssertStrictEquals(func.format(% -4d, -1), {{{-1  }}})
    fn.testAssertStrictEquals(func.format(% -4d, -10), {{{-10 }}})
    fn.testAssertStrictEquals(func.format(% -4d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% -4d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Zero padded, Force sign])

    fn.testAssertStrictEquals(func.format(%+03d, 0), {{{+00}}})
    fn.testAssertStrictEquals(func.format(%+03d, 10), {{{+10}}})
    fn.testAssertStrictEquals(func.format(%+03d, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(%+03d, -10), {{{-10}}})
    fn.testAssertStrictEquals(func.format(%+03d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+03d, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Zero padded, Space sign])

    fn.testAssertStrictEquals(func.format(% 04d, 0), {{{ 000}}})
    fn.testAssertStrictEquals(func.format(% 04d, 10), {{{ 010}}})
    fn.testAssertStrictEquals(func.format(% 04d, -1), {{{-001}}})
    fn.testAssertStrictEquals(func.format(% 04d, -10), {{{-010}}})
    fn.testAssertStrictEquals(func.format(% 04d, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(% 04d, 100.5f), {{{ 100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Size from var args, Force sign])

    fn.testAssertStrictEquals(func.format(%+*d, 4, 0), {{{  +0}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, 10), {{{ +10}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, -1), {{{  -1}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, -10), {{{ -10}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, -250L), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+*d, 4, 100.5f), {{{+100}}})
}
{
    fn.testSubUnit(Integer number format sequences [Size, Size from var args at index, Force sign])

    fn.testAssertStrictEquals(func.format(%+*[2]d, 0, 4), {{{  +0}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, 10, 4), {{{ +10}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, -1, 4), {{{  -1}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, -10, 4), {{{ -10}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, -250L, 4), {{{-250}}})
    fn.testAssertStrictEquals(func.format(%+*[2]d, 100.5f, 4), {{{+100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [No size])

    fn.testAssertStrictEquals(func.format(%b, 0), {{{0}}})
    fn.testAssertStrictEquals(func.format(%b, 10), {{{1010}}})
    fn.testAssertStrictEquals(func.format(%b, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%b, -10), {{{-1010}}})
    fn.testAssertStrictEquals(func.format(%b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%b, 100.5f), {{{1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Force sign])

    fn.testAssertStrictEquals(func.format(%+b, 0), {{{+0}}})
    fn.testAssertStrictEquals(func.format(%+b, 10), {{{+1010}}})
    fn.testAssertStrictEquals(func.format(%+b, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%+b, -10), {{{-1010}}})
    fn.testAssertStrictEquals(func.format(%+b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%+b, 100.5f), {{{+1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Space sign])

    fn.testAssertStrictEquals(func.format(% b, 0), {{{ 0}}})
    fn.testAssertStrictEquals(func.format(% b, 10), {{{ 1010}}})
    fn.testAssertStrictEquals(func.format(% b, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(% b, -10), {{{-1010}}})
    fn.testAssertStrictEquals(func.format(% b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(% b, 100.5f), {{{ 1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size])

    fn.testAssertStrictEquals(func.format(%7b, 0), {{{      0}}})
    fn.testAssertStrictEquals(func.format(%7b, 10), {{{   1010}}})
    fn.testAssertStrictEquals(func.format(%7b, -1), {{{     -1}}})
    fn.testAssertStrictEquals(func.format(%7b, -10), {{{  -1010}}})
    fn.testAssertStrictEquals(func.format(%7b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%7b, 100.5f), {{{1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Left aligned])

    fn.testAssertStrictEquals(func.format(%-7b, 0), {{{0      }}})
    fn.testAssertStrictEquals(func.format(%-7b, 10), {{{1010   }}})
    fn.testAssertStrictEquals(func.format(%-7b, -1), {{{-1     }}})
    fn.testAssertStrictEquals(func.format(%-7b, -10), {{{-1010  }}})
    fn.testAssertStrictEquals(func.format(%-7b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%-7b, 100.5f), {{{1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Zero padded])

    fn.testAssertStrictEquals(func.format(%07b, 0), {{{0000000}}})
    fn.testAssertStrictEquals(func.format(%07b, 10), {{{0001010}}})
    fn.testAssertStrictEquals(func.format(%07b, -1), {{{-000001}}})
    fn.testAssertStrictEquals(func.format(%07b, -10), {{{-001010}}})
    fn.testAssertStrictEquals(func.format(%07b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%07b, 100.5f), {{{1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Force sign])

    fn.testAssertStrictEquals(func.format(%+7b, 0), {{{     +0}}})
    fn.testAssertStrictEquals(func.format(%+7b, 10), {{{  +1010}}})
    fn.testAssertStrictEquals(func.format(%+7b, -1), {{{     -1}}})
    fn.testAssertStrictEquals(func.format(%+7b, -10), {{{  -1010}}})
    fn.testAssertStrictEquals(func.format(%+7b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%+7b, 100.5f), {{{+1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Space sign])

    fn.testAssertStrictEquals(func.format(% 7b, 0), {{{      0}}})
    fn.testAssertStrictEquals(func.format(% 7b, 10), {{{   1010}}})
    fn.testAssertStrictEquals(func.format(% 7b, -1), {{{     -1}}})
    fn.testAssertStrictEquals(func.format(% 7b, -10), {{{  -1010}}})
    fn.testAssertStrictEquals(func.format(% 7b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(% 7b, 100.5f), {{{ 1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Left aligned, Force sign])

    fn.testAssertStrictEquals(func.format(%+-9b, 0), {{{+0       }}})
    fn.testAssertStrictEquals(func.format(%+-9b, 10), {{{+1010    }}})
    fn.testAssertStrictEquals(func.format(%+-9b, -1), {{{-1       }}})
    fn.testAssertStrictEquals(func.format(%+-9b, -10), {{{-1010    }}})
    fn.testAssertStrictEquals(func.format(%+-9b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%+-9b, 100.5f), {{{+1100100 }}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Left aligned, Space sign])

    fn.testAssertStrictEquals(func.format(% -9b, 0), {{{ 0       }}})
    fn.testAssertStrictEquals(func.format(% -9b, 10), {{{ 1010    }}})
    fn.testAssertStrictEquals(func.format(% -9b, -1), {{{-1       }}})
    fn.testAssertStrictEquals(func.format(% -9b, -10), {{{-1010    }}})
    fn.testAssertStrictEquals(func.format(% -9b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(% -9b, 100.5f), {{{ 1100100 }}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Zero padded, Force sign])

    fn.testAssertStrictEquals(func.format(%+07b, 0), {{{+000000}}})
    fn.testAssertStrictEquals(func.format(%+07b, 10), {{{+001010}}})
    fn.testAssertStrictEquals(func.format(%+07b, -1), {{{-000001}}})
    fn.testAssertStrictEquals(func.format(%+07b, -10), {{{-001010}}})
    fn.testAssertStrictEquals(func.format(%+07b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%+07b, 100.5f), {{{+1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Zero padded, Space sign])

    fn.testAssertStrictEquals(func.format(% 09b, 0), {{{ 00000000}}})
    fn.testAssertStrictEquals(func.format(% 09b, 10), {{{ 00001010}}})
    fn.testAssertStrictEquals(func.format(% 09b, -1), {{{-00000001}}})
    fn.testAssertStrictEquals(func.format(% 09b, -10), {{{-00001010}}})
    fn.testAssertStrictEquals(func.format(% 09b, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(% 09b, 100.5f), {{{ 01100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Size from var args, Force sign])

    fn.testAssertStrictEquals(func.format(%+*b, 7, 0), {{{     +0}}})
    fn.testAssertStrictEquals(func.format(%+*b, 7, 10), {{{  +1010}}})
    fn.testAssertStrictEquals(func.format(%+*b, 7, -1), {{{     -1}}})
    fn.testAssertStrictEquals(func.format(%+*b, 7, -10), {{{  -1010}}})
    fn.testAssertStrictEquals(func.format(%+*b, 7, -250L), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%+*b, 7, 100.5f), {{{+1100100}}})
}
{
    fn.testSubUnit(Binary Integer number format sequences [Size, Size from var args at index, Force sign])

    fn.testAssertStrictEquals(func.format(%+*[2]b, 0, 7), {{{     +0}}})
    fn.testAssertStrictEquals(func.format(%+*[2]b, 10, 7), {{{  +1010}}})
    fn.testAssertStrictEquals(func.format(%+*[2]b, -1, 7), {{{     -1}}})
    fn.testAssertStrictEquals(func.format(%+*[2]b, -10, 7), {{{  -1010}}})
    fn.testAssertStrictEquals(func.format(%+*[2]b, -250L, 7), {{{-11111010}}})
    fn.testAssertStrictEquals(func.format(%+*[2]b, 100.5f, 7), {{{+1100100}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [No size])

    fn.testAssertStrictEquals(func.format(%o, 0), {{{0}}})
    fn.testAssertStrictEquals(func.format(%o, 10), {{{12}}})
    fn.testAssertStrictEquals(func.format(%o, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(%o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%o, 100.5f), {{{144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Force sign])

    fn.testAssertStrictEquals(func.format(%+o, 0), {{{+0}}})
    fn.testAssertStrictEquals(func.format(%+o, 10), {{{+12}}})
    fn.testAssertStrictEquals(func.format(%+o, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%+o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(%+o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%+o, 100.5f), {{{+144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Space sign])

    fn.testAssertStrictEquals(func.format(% o, 0), {{{ 0}}})
    fn.testAssertStrictEquals(func.format(% o, 10), {{{ 12}}})
    fn.testAssertStrictEquals(func.format(% o, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(% o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(% o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(% o, 100.5f), {{{ 144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size])

    fn.testAssertStrictEquals(func.format(%3o, 0), {{{  0}}})
    fn.testAssertStrictEquals(func.format(%3o, 10), {{{ 12}}})
    fn.testAssertStrictEquals(func.format(%3o, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%3o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(%3o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%3o, 100.5f), {{{144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Left aligned])

    fn.testAssertStrictEquals(func.format(%-3o, 0), {{{0  }}})
    fn.testAssertStrictEquals(func.format(%-3o, 10), {{{12 }}})
    fn.testAssertStrictEquals(func.format(%-3o, -1), {{{-1 }}})
    fn.testAssertStrictEquals(func.format(%-3o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(%-3o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%-3o, 100.5f), {{{144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Zero padded])

    fn.testAssertStrictEquals(func.format(%03o, 0), {{{000}}})
    fn.testAssertStrictEquals(func.format(%03o, 10), {{{012}}})
    fn.testAssertStrictEquals(func.format(%03o, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(%03o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(%03o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%03o, 100.5f), {{{144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Force sign])

    fn.testAssertStrictEquals(func.format(%+3o, 0), {{{ +0}}})
    fn.testAssertStrictEquals(func.format(%+3o, 10), {{{+12}}})
    fn.testAssertStrictEquals(func.format(%+3o, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%+3o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(%+3o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%+3o, 100.5f), {{{+144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Space sign])

    fn.testAssertStrictEquals(func.format(% 3o, 0), {{{  0}}})
    fn.testAssertStrictEquals(func.format(% 3o, 10), {{{ 12}}})
    fn.testAssertStrictEquals(func.format(% 3o, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(% 3o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(% 3o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(% 3o, 100.5f), {{{ 144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Left aligneo, Force sign])

    fn.testAssertStrictEquals(func.format(%+-4o, 0), {{{+0  }}})
    fn.testAssertStrictEquals(func.format(%+-4o, 10), {{{+12 }}})
    fn.testAssertStrictEquals(func.format(%+-4o, -1), {{{-1  }}})
    fn.testAssertStrictEquals(func.format(%+-4o, -10), {{{-12 }}})
    fn.testAssertStrictEquals(func.format(%+-4o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%+-4o, 100.5f), {{{+144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Left aligneo, Space sign])

    fn.testAssertStrictEquals(func.format(% -4o, 0), {{{ 0  }}})
    fn.testAssertStrictEquals(func.format(% -4o, 10), {{{ 12 }}})
    fn.testAssertStrictEquals(func.format(% -4o, -1), {{{-1  }}})
    fn.testAssertStrictEquals(func.format(% -4o, -10), {{{-12 }}})
    fn.testAssertStrictEquals(func.format(% -4o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(% -4o, 100.5f), {{{ 144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Zero paddeo, Force sign])

    fn.testAssertStrictEquals(func.format(%+03o, 0), {{{+00}}})
    fn.testAssertStrictEquals(func.format(%+03o, 10), {{{+12}}})
    fn.testAssertStrictEquals(func.format(%+03o, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(%+03o, -10), {{{-12}}})
    fn.testAssertStrictEquals(func.format(%+03o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%+03o, 100.5f), {{{+144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Zero paddeo, Space sign])

    fn.testAssertStrictEquals(func.format(% 04o, 0), {{{ 000}}})
    fn.testAssertStrictEquals(func.format(% 04o, 10), {{{ 012}}})
    fn.testAssertStrictEquals(func.format(% 04o, -1), {{{-001}}})
    fn.testAssertStrictEquals(func.format(% 04o, -10), {{{-012}}})
    fn.testAssertStrictEquals(func.format(% 04o, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(% 04o, 100.5f), {{{ 144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Size from var args, Force sign])

    fn.testAssertStrictEquals(func.format(%+*o, 4, 0), {{{  +0}}})
    fn.testAssertStrictEquals(func.format(%+*o, 4, 10), {{{ +12}}})
    fn.testAssertStrictEquals(func.format(%+*o, 4, -1), {{{  -1}}})
    fn.testAssertStrictEquals(func.format(%+*o, 4, -10), {{{ -12}}})
    fn.testAssertStrictEquals(func.format(%+*o, 4, -250L), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%+*o, 4, 100.5f), {{{+144}}})
}
{
    fn.testSubUnit(Octal Integer number format sequences [Size, Size from var args at index, Force sign])

    fn.testAssertStrictEquals(func.format(%+*[2]o, 0, 4), {{{  +0}}})
    fn.testAssertStrictEquals(func.format(%+*[2]o, 10, 4), {{{ +12}}})
    fn.testAssertStrictEquals(func.format(%+*[2]o, -1, 4), {{{  -1}}})
    fn.testAssertStrictEquals(func.format(%+*[2]o, -10, 4), {{{ -12}}})
    fn.testAssertStrictEquals(func.format(%+*[2]o, -250L, 4), {{{-372}}})
    fn.testAssertStrictEquals(func.format(%+*[2]o, 100.5f, 4), {{{+144}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [No size])

    fn.testAssertStrictEquals(func.format(%x, 0), {{{0}}})
    fn.testAssertStrictEquals(func.format(%x, 10), {{{A}}})
    fn.testAssertStrictEquals(func.format(%x, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%x, -10), {{{-A}}})
    fn.testAssertStrictEquals(func.format(%x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%x, 100.5f), {{{64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Force sign])

    fn.testAssertStrictEquals(func.format(%+x, 0), {{{+0}}})
    fn.testAssertStrictEquals(func.format(%+x, 10), {{{+A}}})
    fn.testAssertStrictEquals(func.format(%+x, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%+x, -10), {{{-A}}})
    fn.testAssertStrictEquals(func.format(%+x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%+x, 100.5f), {{{+64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Space sign])

    fn.testAssertStrictEquals(func.format(% x, 0), {{{ 0}}})
    fn.testAssertStrictEquals(func.format(% x, 10), {{{ A}}})
    fn.testAssertStrictEquals(func.format(% x, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(% x, -10), {{{-A}}})
    fn.testAssertStrictEquals(func.format(% x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(% x, 100.5f), {{{ 64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size])

    fn.testAssertStrictEquals(func.format(%2x, 0), {{{ 0}}})
    fn.testAssertStrictEquals(func.format(%2x, 10), {{{ A}}})
    fn.testAssertStrictEquals(func.format(%2x, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%2x, -10), {{{-A}}})
    fn.testAssertStrictEquals(func.format(%2x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%2x, 100.5f), {{{64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Left aligned])

    fn.testAssertStrictEquals(func.format(%-2x, 0), {{{0 }}})
    fn.testAssertStrictEquals(func.format(%-2x, 10), {{{A }}})
    fn.testAssertStrictEquals(func.format(%-2x, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%-2x, -10), {{{-A}}})
    fn.testAssertStrictEquals(func.format(%-2x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%-2x, 100.5f), {{{64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Zero padded])

    fn.testAssertStrictEquals(func.format(%02x, 0), {{{00}}})
    fn.testAssertStrictEquals(func.format(%02x, 10), {{{0A}}})
    fn.testAssertStrictEquals(func.format(%02x, -1), {{{-1}}})
    fn.testAssertStrictEquals(func.format(%02x, -10), {{{-A}}})
    fn.testAssertStrictEquals(func.format(%02x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%02x, 100.5f), {{{64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Force sign])

    fn.testAssertStrictEquals(func.format(%+3x, 0), {{{ +0}}})
    fn.testAssertStrictEquals(func.format(%+3x, 10), {{{ +A}}})
    fn.testAssertStrictEquals(func.format(%+3x, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%+3x, -10), {{{ -A}}})
    fn.testAssertStrictEquals(func.format(%+3x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%+3x, 100.5f), {{{+64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Space sign])

    fn.testAssertStrictEquals(func.format(% 3x, 0), {{{  0}}})
    fn.testAssertStrictEquals(func.format(% 3x, 10), {{{  A}}})
    fn.testAssertStrictEquals(func.format(% 3x, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(% 3x, -10), {{{ -A}}})
    fn.testAssertStrictEquals(func.format(% 3x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(% 3x, 100.5f), {{{ 64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Left alignex, Force sign])

    fn.testAssertStrictEquals(func.format(%+-3x, 0), {{{+0 }}})
    fn.testAssertStrictEquals(func.format(%+-3x, 10), {{{+A }}})
    fn.testAssertStrictEquals(func.format(%+-3x, -1), {{{-1 }}})
    fn.testAssertStrictEquals(func.format(%+-3x, -10), {{{-A }}})
    fn.testAssertStrictEquals(func.format(%+-3x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%+-3x, 100.5f), {{{+64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Left alignex, Space sign])

    fn.testAssertStrictEquals(func.format(% -3x, 0), {{{ 0 }}})
    fn.testAssertStrictEquals(func.format(% -3x, 10), {{{ A }}})
    fn.testAssertStrictEquals(func.format(% -3x, -1), {{{-1 }}})
    fn.testAssertStrictEquals(func.format(% -3x, -10), {{{-A }}})
    fn.testAssertStrictEquals(func.format(% -3x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(% -3x, 100.5f), {{{ 64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Zero padded, Force sign])

    fn.testAssertStrictEquals(func.format(%+03x, 0), {{{+00}}})
    fn.testAssertStrictEquals(func.format(%+03x, 10), {{{+0A}}})
    fn.testAssertStrictEquals(func.format(%+03x, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(%+03x, -10), {{{-0A}}})
    fn.testAssertStrictEquals(func.format(%+03x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%+03x, 100.5f), {{{+64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Zero padded, Space sign])

    fn.testAssertStrictEquals(func.format(% 03x, 0), {{{ 00}}})
    fn.testAssertStrictEquals(func.format(% 03x, 10), {{{ 0A}}})
    fn.testAssertStrictEquals(func.format(% 03x, -1), {{{-01}}})
    fn.testAssertStrictEquals(func.format(% 03x, -10), {{{-0A}}})
    fn.testAssertStrictEquals(func.format(% 03x, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(% 03x, 100.5f), {{{ 64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Size from var args, Force sign])

    fn.testAssertStrictEquals(func.format(%+*x, 3, 0), {{{ +0}}})
    fn.testAssertStrictEquals(func.format(%+*x, 3, 10), {{{ +A}}})
    fn.testAssertStrictEquals(func.format(%+*x, 3, -1), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%+*x, 3, -10), {{{ -A}}})
    fn.testAssertStrictEquals(func.format(%+*x, 3, -250L), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%+*x, 3, 100.5f), {{{+64}}})
}
{
    fn.testSubUnit(Hex Integer number format sequences [Size, Size from var args at index, Force sign])

    fn.testAssertStrictEquals(func.format(%+*[2]x, 0, 3), {{{ +0}}})
    fn.testAssertStrictEquals(func.format(%+*[2]x, 10, 3), {{{ +A}}})
    fn.testAssertStrictEquals(func.format(%+*[2]x, -1, 3), {{{ -1}}})
    fn.testAssertStrictEquals(func.format(%+*[2]x, -10, 3), {{{ -A}}})
    fn.testAssertStrictEquals(func.format(%+*[2]x, -250L, 3), {{{-FA}}})
    fn.testAssertStrictEquals(func.format(%+*[2]x, 100.5f, 3), {{{+64}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Decimal places])

    fn.testAssertStrictEquals(func.format("%.2f", 0), {{{0.00}}})
    fn.testAssertStrictEquals(func.format("%.2f", 10.5), {{{10.50}}})
    fn.testAssertStrictEquals(func.format("%.2f", -1.235), {{{-1.24}}})
    fn.testAssertStrictEquals(func.format("%.2f", 5.2345), {{{5.23}}})
    fn.testAssertStrictEquals(func.format("%.2f", -10.f), {{{-10.00}}})
    fn.testAssertStrictEquals(func.format("%.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%.2f", 100.5f), {{{100.50}}})
    fn.testAssertStrictEquals(func.format("%.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+.2f", 0), {{{+0.00}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 10.5), {{{+10.50}}})
    fn.testAssertStrictEquals(func.format("%+.2f", -1.235), {{{-1.24}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 5.2345), {{{+5.23}}})
    fn.testAssertStrictEquals(func.format("%+.2f", -10.f), {{{-10.00}}})
    fn.testAssertStrictEquals(func.format("%+.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% .2f", 0), {{{ 0.00}}})
    fn.testAssertStrictEquals(func.format("% .2f", 10.5), {{{ 10.50}}})
    fn.testAssertStrictEquals(func.format("% .2f", -1.235), {{{-1.24}}})
    fn.testAssertStrictEquals(func.format("% .2f", 5.2345), {{{ 5.23}}})
    fn.testAssertStrictEquals(func.format("% .2f", -10.f), {{{-10.00}}})
    fn.testAssertStrictEquals(func.format("% .2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% .2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% .2f", 2100.21f), {{{ 2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Decimal places])

    fn.testAssertStrictEquals(func.format("%7.2f", 0), {{{   0.00}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 10.5), {{{  10.50}}})
    fn.testAssertStrictEquals(func.format("%7.2f", -1.235), {{{  -1.24}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 5.2345), {{{   5.23}}})
    fn.testAssertStrictEquals(func.format("%7.2f", -10.f), {{{ -10.00}}})
    fn.testAssertStrictEquals(func.format("%7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("%7.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Left aligned, Decimal places])

    fn.testAssertStrictEquals(func.format("%-7.2f", 0), {{{0.00   }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 10.5), {{{10.50  }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", -1.235), {{{-1.24  }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 5.2345), {{{5.23   }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", -10.f), {{{-10.00 }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 100.5f), {{{100.50 }}})
    fn.testAssertStrictEquals(func.format("%-7.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Zero padded, Decimal places])

    fn.testAssertStrictEquals(func.format("%07.2f", 0), {{{0000.00}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 10.5), {{{0010.50}}})
    fn.testAssertStrictEquals(func.format("%07.2f", -1.235), {{{-001.24}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 5.2345), {{{0005.23}}})
    fn.testAssertStrictEquals(func.format("%07.2f", -10.f), {{{-010.00}}})
    fn.testAssertStrictEquals(func.format("%07.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 100.5f), {{{0100.50}}})
    fn.testAssertStrictEquals(func.format("%07.2f", 2100.21f), {{{2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+7.2f", 0), {{{  +0.00}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 10.5), {{{ +10.50}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", -1.235), {{{  -1.24}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 5.2345), {{{  +5.23}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", -10.f), {{{ -10.00}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+7.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% 7.2f", 0), {{{   0.00}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 10.5), {{{  10.50}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", -1.235), {{{  -1.24}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 5.2345), {{{   5.23}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", -10.f), {{{ -10.00}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% 7.2f", 2100.21f), {{{ 2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Left aligned, Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+-7.2f", 0), {{{+0.00  }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 10.5), {{{+10.50 }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", -1.235), {{{-1.24  }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 5.2345), {{{+5.23  }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", -10.f), {{{-10.00 }}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+-7.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Left aligned, Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% -7.2f", 0), {{{ 0.00  }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 10.5), {{{ 10.50 }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", -1.235), {{{-1.24  }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 5.2345), {{{ 5.23  }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", -10.f), {{{-10.00 }}})
    fn.testAssertStrictEquals(func.format("% -7.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% -7.2f", 2100.21f), {{{ 2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Zero padded, Force sign, Decimal places])

    fn.testAssertStrictEquals(func.format("%+07.2f", 0), {{{+000.00}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 10.5), {{{+010.50}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", -1.235), {{{-001.24}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 5.2345), {{{+005.23}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", -10.f), {{{-010.00}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 100.5f), {{{+100.50}}})
    fn.testAssertStrictEquals(func.format("%+07.2f", 2100.21f), {{{+2100.21}}})
}
{
    fn.testSubUnit(Floating point number format sequences [Size, Zero padded, Space sign, Decimal places])

    fn.testAssertStrictEquals(func.format("% 07.2f", 0), {{{ 000.00}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 10.5), {{{ 010.50}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", -1.235), {{{-001.24}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 5.2345), {{{ 005.23}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", -10.f), {{{-010.00}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", -250L), {{{-250.00}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 100.5f), {{{ 100.50}}})
    fn.testAssertStrictEquals(func.format("% 07.2f", 2100.21f), {{{ 2100.21}}})
}
{
    fn.testSubUnit(Char format sequences [No size])

    fn.testAssertStrictEquals(func.format("%c", 65), {{{A}}})
    fn.testAssertStrictEquals(func.format("%c", 67.6), {{{C}}})
    fn.testAssertStrictEquals(func.format("%c", a), {{{a}}})
    fn.testAssertStrictEquals(func.format("%c", 0), "\0")
}
{
    fn.testSubUnit(Char format sequences [Size])

    fn.testAssertStrictEquals(func.format("%3c", 65), {{{  A}}})
    fn.testAssertStrictEquals(func.format("%3c", 67.6), {{{  C}}})
    fn.testAssertStrictEquals(func.format("%3c", a), {{{  a}}})
    fn.testAssertStrictEquals(func.format("%3c", 0), "  \0")
}
{
    fn.testSubUnit(Char format sequences [Size, Left aligned])

    fn.testAssertStrictEquals(func.format("%-3c", 65), {{{A  }}})
    fn.testAssertStrictEquals(func.format("%-3c", 67.6), {{{C  }}})
    fn.testAssertStrictEquals(func.format("%-3c", a), {{{a  }}})
    fn.testAssertStrictEquals(func.format("%-3c", 0), "\0  ")
}
{
    fn.testSubUnit(Char format sequences [Size, Size from var args])

    fn.testAssertStrictEquals(func.format("%*c", 3, 65), {{{  A}}})
    fn.testAssertStrictEquals(func.format("%*c", 3, 67.6), {{{  C}}})
    fn.testAssertStrictEquals(func.format("%*c", 3, a), {{{  a}}})
    fn.testAssertStrictEquals(func.format("%*c", 3, 0), "  \0")
}
{
    fn.testSubUnit(Char format sequences [Size, Size from var args at index])

    fn.testAssertStrictEquals(func.format("%*[2]c", 65, 3), {{{  A}}})
    fn.testAssertStrictEquals(func.format("%*[2]c", 67.6, 3), {{{  C}}})
    fn.testAssertStrictEquals(func.format("%*[2]c", a, 3), {{{  a}}})
    fn.testAssertStrictEquals(func.format("%*[2]c", 0, 3), "  \0")
}
{
    fn.testSubUnit(Char format sequences [Size, Size from var args, Left aligned])

    fn.testAssertStrictEquals(func.format("%-*c", 3, 65), {{{A  }}})
    fn.testAssertStrictEquals(func.format("%-*c", 3, 67.6), {{{C  }}})
    fn.testAssertStrictEquals(func.format("%-*c", 3, a), {{{a  }}})
    fn.testAssertStrictEquals(func.format("%-*c", 3, 0), "\0  ")
}
{
    fn.testSubUnit(Char format sequences [Size, Size from var args at index, Left aligned])

    fn.testAssertStrictEquals(func.format("%-*[2]c", 65, 3), {{{A  }}})
    fn.testAssertStrictEquals(func.format("%-*[2]c", 67.6, 3), {{{C  }}})
    fn.testAssertStrictEquals(func.format("%-*[2]c", a, 3), {{{a  }}})
    fn.testAssertStrictEquals(func.format("%-*[2]c", 0, 3), "\0  ")
}
{
    fn.testSubUnit(Char format sequences [Argument from var args, Size, Size from var args, Left aligned])

    fn.testAssertStrictEquals(func.format("%[2]-*c", 3, 65), {{{A  }}})
    fn.testAssertStrictEquals(func.format("%[2]-*c", 3, 67.6), {{{C  }}})
    fn.testAssertStrictEquals(func.format("%[2]-*c", 3, a), {{{a  }}})
    fn.testAssertStrictEquals(func.format("%[2]-*c", 3, 0), "\0  ")
}
{
    fn.testSubUnit(Char format sequences [Argument from var args, Size, Size from var args at index])

    fn.testAssertStrictEquals(func.format("%[1]*[2]c", 65, 3), {{{  A}}})
    fn.testAssertStrictEquals(func.format("%[1]*[2]c", 67.6, 3), {{{  C}}})
    fn.testAssertStrictEquals(func.format("%[1]*[2]c", a, 3), {{{  a}}})
    fn.testAssertStrictEquals(func.format("%[1]*[2]c", 0, 3), "  \0")
}
