lang.name = Lang Tests (Lang Functions [func.isLangVersionNewer])
lang.version = v1.0.0

lang.test = 1

# Preparation
# ...

# Tests
nontry {
    fn.testSubUnit(Lang functions [func.isLangVersionNewer] - Invalid argument count)
    
    try {
        lang.errorOutput = 0
        func.isLangVersionNewer(x)
    }finally {
        lang.errorOutput = 1
        fn.testAssertError($LANG_ERROR_INVALID_ARG_COUNT)
    }
    try {
        lang.errorOutput = 0
        func.isLangVersionNewer(x, y)
    }finally {
        lang.errorOutput = 1
        fn.testAssertError($LANG_ERROR_INVALID_ARG_COUNT)
    }
    try {
        lang.errorOutput = 0
        func.isLangVersionNewer(x, y, z)
    }finally {
        lang.errorOutput = 1
        fn.testAssertError($LANG_ERROR_INVALID_ARG_COUNT)
    }
}
nontry {
    fn.testSubUnit(Lang functions [func.isLangVersionNewer] - Invalid Lang version)
    
    try {
        lang.errorOutput = 0
        lang.version = xyz
    }finally {
        lang.errorOutput = 1
        fn.resetErrno()
    }
    try {
        lang.errorOutput = 0
        func.isLangVersionNewer()
    }finally {
        lang.errorOutput = 1
        fn.testAssertError($LANG_ERROR_LANG_VER_ERROR)
    }
}
nontry {
    fn.testSubUnit(Lang functions [func.isLangVersionNewer] - Older Lang file version)
    
    try {
        lang.errorOutput = 0
        lang.version = v0.99.99
    }finally {
        lang.errorOutput = 1
        fn.resetErrno()
    }
    
    fn.testAssertStrictEquals(func.isLangVersionNewer(), 1)
}
nontry {
    fn.testSubUnit(Lang functions [func.isLangVersionNewer] - Newer Lang file version)
    
    try {
        lang.errorOutput = 0
        lang.version = v99.99.99
    }finally {
        lang.errorOutput = 1
        fn.resetErrno()
    }
    
    fn.testAssertStrictEquals(func.isLangVersionNewer(), 0)
}

# Reset
lang.version = v1.0.0
